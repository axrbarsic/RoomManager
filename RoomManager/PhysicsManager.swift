import SwiftUI
import Combine

class PhysicsManager: ObservableObject {
    static let shared = PhysicsManager()
    
    // –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —á—Ç–æ —Ö–∞–æ—Å –≤–∫–ª—é—á—ë–Ω (—è—á–µ–π–∫–∏ –¥–æ–ª–∂–Ω—ã –¥–≤–∏–≥–∞—Ç—å—Å—è)
    @Published var isChaosActive: Bool = false {
        didSet {
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –Ω–æ–≤–æ–π –≤—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
            HighPerformanceEffectManager.shared.isCrazyModeActive = isChaosActive
        }
    }
    
    // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
    @Published var chaosTick: Double = 0
    
    // –ò–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
    static let chaosStartedNotification = Notification.Name("chaosStartedNotification")
    
    // –£–±–∏—Ä–∞–µ–º Timer - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º CADisplayLink –∏–∑ HighPerformanceEffectManager
    private var cancellables = Set<AnyCancellable>()
    
    init() {
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        HighPerformanceEffectManager.shared.$globalTime
            .assign(to: \.chaosTick, on: self)
            .store(in: &cancellables)
        
        // –ü—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ —Ñ–æ–Ω –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ö–∞–æ—Ç–∏—á–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
        NotificationCenter.default.addObserver(self,
                                               selector: #selector(handleDidEnterBackground),
                                               name: UIApplication.didEnterBackgroundNotification,
                                               object: nil)
    }
    
    @objc private func handleDidEnterBackground() {
        stopChaos()
    }
    
    func startChaos() {
        guard !isChaosActive else { return }
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        isChaosActive = true
        HighPerformanceEffectManager.shared.isCrazyModeActive = true
        HighPerformanceEffectManager.shared.intensity = 1.0
        
        // –ü–æ—Å—ã–ª–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Ö–∞–æ—Å –Ω–∞—á–∞–ª—Å—è
        NotificationCenter.default.post(name: PhysicsManager.chaosStartedNotification, object: nil)
        
        print("üéØ PHYSICS: Chaos started with high-performance system")
    }
    
    func stopChaos() {
        guard isChaosActive else { return }
        
        // –ü–ª–∞–≤–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã
        HighPerformanceEffectManager.shared.intensity = 0.0
        
        // –û—Ç–∫–ª—é—á–∞–µ–º —Ö–∞–æ—Å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) { [weak self] in
            withAnimation(.easeOut(duration: 0.5)) {
                self?.isChaosActive = false
                HighPerformanceEffectManager.shared.isCrazyModeActive = false
            }
        }
        
        print("üéØ PHYSICS: Chaos stopped")
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏ (–¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤)
    func stopChaosImmediately() {
        isChaosActive = false
        HighPerformanceEffectManager.shared.isCrazyModeActive = false
        HighPerformanceEffectManager.shared.intensity = 0.0
    }
    
    deinit {
        NotificationCenter.default.removeObserver(self)
        cancellables.removeAll()
    }
}

