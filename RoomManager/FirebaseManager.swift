import Foundation
import Firebase
import FirebaseFirestore
import FirebaseAuth
import Combine
import UIKit
import GoogleSignIn
import Network

// MARK: - –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
enum ConnectionStatus {
    case connected      // –ó–µ–ª–µ–Ω—ã–π - –ø–æ–¥–∫–ª—é—á–µ–Ω–æ
    case unstable      // –ñ–µ–ª—Ç—ã–π - –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ  
    case disconnected  // –ö—Ä–∞—Å–Ω—ã–π - –Ω–µ—Ç —Å–≤—è–∑–∏
}

// MARK: - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è Google Sign-In
// GoogleSignIn SDK –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ –ø—Ä–æ–µ–∫—Ç

class FirebaseManager: ObservableObject {
    static let shared = FirebaseManager()
    
    private let db = Firestore.firestore()
    private var listener: ListenerRegistration?
    private var authStateListener: AuthStateDidChangeListenerHandle?
    
    @Published var isAuthenticated = false
    @Published var isSyncing = false
    @Published var lastSyncTime: Date?
    @Published var syncError: String?
    @Published var currentUserEmail: String?
    @Published var connectionStatus: ConnectionStatus = .disconnected
    
    private var userId: String?
    private let deviceId = UIDevice.current.identifierForVendor?.uuidString ?? UUID().uuidString
    private let deviceName = UIDevice.current.name
    
    // Network Monitor –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–∏
    private let networkMonitor = NWPathMonitor()
    private let networkQueue = DispatchQueue(label: "NetworkMonitor")
    private var isNetworkAvailable = false
    private var lastSyncSuccess: Date?
    private var connectionCheckTimer: Timer?
    
    // –î–ª—è –ø–æ–¥–ø–∏—Å–æ–∫ Combine
    private var cancellables = Set<AnyCancellable>()
    
    private init() {
        configureGoogleSignIn()
        validateFirebaseConfiguration()
        setupAuthentication()
        startNetworkMonitoring()
        startConnectionStatusMonitoring()
        
        // –°—Ä–∞–∑—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        updateConnectionStatus()
    }
    
    // MARK: - Google Sign-In Configuration
    
    private func configureGoogleSignIn() {
        guard let path = Bundle.main.path(forResource: "GoogleService-Info", ofType: "plist"),
              let dict = NSDictionary(contentsOfFile: path),
              let clientId = dict["CLIENT_ID"] as? String else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å CLIENT_ID –∏–∑ GoogleService-Info.plist")
            return
        }
        
        print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sign-In —Å CLIENT_ID: \(clientId)")
        
        let config = GIDConfiguration(clientID: clientId)
        GIDSignIn.sharedInstance.configuration = config
    }
    
    // MARK: - Validation
    
    private func validateFirebaseConfiguration() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º Bundle ID
        if let bundleID = Bundle.main.bundleIdentifier {
            print("üì± –¢–µ–∫—É—â–∏–π Bundle ID –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: \(bundleID)")
            
            // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å Bundle ID –∏–∑ GoogleService-Info.plist
            if let path = Bundle.main.path(forResource: "GoogleService-Info", ofType: "plist"),
               let dict = NSDictionary(contentsOfFile: path),
               let configBundleID = dict["BUNDLE_ID"] as? String {
                print("üìÑ Bundle ID –≤ GoogleService-Info.plist: \(configBundleID)")
                
                if bundleID != configBundleID {
                    print("‚ö†Ô∏è –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï: Bundle ID –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å Bundle ID –≤ GoogleService-Info.plist")
                }
            }
        }
    }
    
    // MARK: - Authentication
    
    private func setupAuthentication() {
        authStateListener = Auth.auth().addStateDidChangeListener { [weak self] _, user in
            DispatchQueue.main.async {
                self?.isAuthenticated = user != nil
                self?.userId = user?.uid
                self?.currentUserEmail = user?.email
                
                if user != nil {
                    self?.startListeningForChanges()
                    print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: \(user?.email ?? "–∞–Ω–æ–Ω–∏–º–Ω—ã–π")")
                    
                    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –±—É–ª–µ–≤—ã—Ö –ø–æ–ª–µ–π –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–Ω–∞—Ç
                    Task {
                        await self?.migrateExistingRooms()
                    }
                } else {
                    self?.stopListeningForChanges()
                    print("‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
                }
            }
        }
    }
    
    func signInAnonymously() async throws {
        do {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if Auth.auth().currentUser != nil {
                print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
                await MainActor.run {
                    self.isAuthenticated = true
                }
                return
            }
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–æ–Ω–∏–º–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
            let result = try await Auth.auth().signInAnonymously()
            await MainActor.run {
                userId = result.user.uid
                isAuthenticated = true
            }
            print("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–Ω–æ–Ω–∏–º–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: \(result.user.uid)")
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: \(error.localizedDescription)")
            
            await MainActor.run {
                // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞
                if let nsError = error as NSError? {
                    print("  –î–æ–º–µ–Ω –æ—à–∏–±–∫–∏: \(nsError.domain)")
                    print("  –ö–æ–¥ –æ—à–∏–±–∫–∏: \(nsError.code)")
                    print("  –î–µ—Ç–∞–ª–∏: \(nsError.userInfo)")
                    
                    // –ê–Ω–∞–ª–∏–∑ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫
                    if nsError.domain == "FIRAuthErrorDomain" {
                        switch nsError.code {
                        case 17020: // AUTH_API_KEY_ERROR
                            syncError = "–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á Firebase"
                        case 17021: // AUTH_TOKEN_EXPIRED
                            syncError = "–¢–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫"
                        case 17005: // NETWORK_ERROR
                            syncError = "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É"
                        default:
                            syncError = "–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–∫–æ–¥ \(nsError.code))"
                        }
                    } else if nsError.domain == "FIRFirestoreErrorDomain" {
                        switch nsError.code {
                        case 7: // PERMISSION_DENIED
                            syncError = "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Firestore"
                        case 14: // UNAVAILABLE
                            syncError = "–°–µ—Ä–≤–∏—Å Firebase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                        default:
                            syncError = "–û—à–∏–±–∫–∞ Firestore (–∫–æ–¥ \(nsError.code))"
                        }
                    } else {
                        syncError = error.localizedDescription
                    }
                } else {
                    syncError = error.localizedDescription
                }
            }
            
            throw error
        }
    }
    
    // MARK: - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–º–Ω–∞—Ç
    
    func syncRooms(_ rooms: [Room]) async {
        guard let userId = userId else { 
            print("‚ùå –ù–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
            return 
        }
        
        await MainActor.run {
            isSyncing = true
            syncError = nil
        }
        
        do {
            let batch = db.batch()
            let roomsRef = db.collection("users").document(userId).collection("rooms")
            
            print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é \(rooms.count) –∫–æ–º–Ω–∞—Ç")
            
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—É—é –∫–æ–º–Ω–∞—Ç—É
            for room in rooms {
                let firebaseRoom = FirebaseRoom(from: room, deviceId: deviceId)
                let docRef = roomsRef.document(room.id.uuidString)
                
                // –î–ï–ë–ê–ì: –ª–æ–≥–∏—Ä—É–µ–º –±—É–ª–µ–≤—ã –ø–æ–ª—è
                print("üì§ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–æ–º–Ω–∞—Ç—É \(room.number): isMarked=\(room.isMarked), isDeepCleaned=\(room.isDeepCleaned), isCompletedBefore930=\(room.isCompletedBefore930)")
                print("üì§ FirebaseRoom \(firebaseRoom.number): isMarked=\(firebaseRoom.isMarked), isDeepCleaned=\(firebaseRoom.isDeepCleaned), isCompletedBefore930=\(firebaseRoom.isCompletedBefore930)")
                
                try batch.setData(from: firebaseRoom, forDocument: docRef, merge: true)
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            let metadataRef = db.collection("users").document(userId).collection("sync_metadata").document(deviceId)
            let metadata = SyncMetadata(
                id: deviceId,
                lastSyncTimestamp: Date(),
                deviceId: deviceId,
                deviceName: deviceName
            )
            try batch.setData(from: metadata, forDocument: metadataRef)
            
            // –ö–æ–º–º–∏—Ç–∏–º batch
            try await batch.commit()
            
            await MainActor.run {
                lastSyncTime = Date()
                lastSyncSuccess = Date()
                updateConnectionStatus()
            }
            print("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ \(rooms.count) –∫–æ–º–Ω–∞—Ç")
        } catch {
            await MainActor.run {
                syncError = error.localizedDescription
            }
            print("‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: \(error)")
        }
        
        await MainActor.run {
            isSyncing = false
        }
    }
    
    // MARK: - –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç
    
    func fetchRooms() async throws -> [Room] {
        guard let userId = userId else { 
            throw FirebaseError.notAuthenticated 
        }
        
        let snapshot = try await db.collection("users")
            .document(userId)
            .collection("rooms")
            .getDocuments()
        
        let rooms = try snapshot.documents.compactMap { document -> Room? in
            let firebaseRoom = try document.data(as: FirebaseRoom.self)
            return firebaseRoom.toLocalRoom()
        }
        
        // –û—Ç–º–µ—á–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
        await MainActor.run {
            self.lastSyncSuccess = Date()
            self.updateConnectionStatus()
        }
        
        print("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ \(rooms.count) –∫–æ–º–Ω–∞—Ç –∏–∑ Firebase")
        return rooms
    }
    
    // MARK: - –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å–ª—É—à–∞—Ç–µ–ª—å
    
    private func startListeningForChanges() {
        guard let userId = userId else { return }
        
        print("üîÑ –ó–∞–ø—É—Å–∫ —Å–ª—É—à–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \(userId)")
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ª—É—à–∞—Ç–µ–ª—å, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
        stopListeningForChanges()
        
        listener = db.collection("users")
            .document(userId)
            .collection("rooms")
            .addSnapshotListener { snapshot, error in
                if let error = error {
                    print("‚ùå –û—à–∏–±–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è: \(error)")
                    return
                }
                
                guard let snapshot = snapshot, !snapshot.isEmpty else {
                    print("‚ÑπÔ∏è –°–ª—É—à–∞—Ç–µ–ª—å: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
                    return
                }
                
                print("üì• –°–ª—É—à–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –∏–∑–º–µ–Ω–µ–Ω–∏—è: \(snapshot.documentChanges.count)")
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                for change in snapshot.documentChanges {
                    // –û—Ç–ª–∞–¥–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    print("üîÑ –¢–∏–ø –∏–∑–º–µ–Ω–µ–Ω–∏—è: \(change.type.rawValue), –¥–æ–∫—É–º–µ–Ω—Ç: \(change.document.documentID)")
                    
                    switch change.type {
                    case .added, .modified:
                        do {
                            let firebaseRoom = try change.document.data(as: FirebaseRoom.self)
                            let room = firebaseRoom.toLocalRoom()
                            
                            // –í–∞–∂–Ω–æ: –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è UI –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                            DispatchQueue.main.async {
                                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
                                print("üì¢ –ü—É–±–ª–∏–∫—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã: \(room.number)")
                                NotificationCenter.default.post(
                                    name: .roomUpdatedFromFirebase,
                                    object: nil,
                                    userInfo: ["room": room]
                                )
                            }
                        } catch {
                            print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: \(error)")
                        }
                        
                    case .removed:
                        let roomId = change.document.documentID
                        
                        // –í–∞–∂–Ω–æ: –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è UI –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                        DispatchQueue.main.async {
                            print("üóëÔ∏è –ü—É–±–ª–∏–∫—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã: \(roomId)")
                            NotificationCenter.default.post(
                                name: .roomDeletedFromFirebase,
                                object: nil,
                                userInfo: ["roomId": roomId]
                            )
                        }
                    }
                }
            }
    }
    
    private func stopListeningForChanges() {
        if listener != nil {
            print("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏–π")
            listener?.remove()
            listener = nil
        }
    }
    
    // MARK: - –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
    
    func deleteRoom(_ roomId: String) async throws {
        guard let userId = userId else { 
            throw FirebaseError.notAuthenticated 
        }
        
        try await db.collection("users")
            .document(userId)
            .collection("rooms")
            .document(roomId)
            .delete()
    }
    
    // MARK: - –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    
    func clearAllRooms() async throws {
        guard let userId = userId else { 
            throw FirebaseError.notAuthenticated 
        }
        
        let batch = db.batch()
        let snapshot = try await db.collection("users")
            .document(userId)
            .collection("rooms")
            .getDocuments()
        
        for document in snapshot.documents {
            batch.deleteDocument(document.reference)
        }
        
        try await batch.commit()
    }
    
    // MARK: - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Google
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ Google Sign-In
    var isGoogleSignInAvailable: Bool {
        return GIDSignIn.sharedInstance.configuration != nil
    }
    
    /// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Google –∞–∫–∫–∞—É–Ω—Ç
    @MainActor
    func signInWithGoogle() async throws {
        guard let presentingViewController = getRootViewController() else {
            throw FirebaseError.syncFailed("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å root view controller")
        }
        
        do {
            // –í—ã–ø–æ–ª–Ω—è–µ–º Google Sign-In
            let result = try await GIDSignIn.sharedInstance.signIn(withPresenting: presentingViewController)
            let user = result.user
            
            guard let idToken = user.idToken?.tokenString else {
                throw FirebaseError.syncFailed("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Ç–æ–∫–µ–Ω –æ—Ç Google")
            }
            
            let accessToken = user.accessToken.tokenString
            
            // –°–æ–∑–¥–∞–µ–º credential –¥–ª—è Firebase
            let credential = GoogleAuthProvider.credential(withIDToken: idToken, accessToken: accessToken)
            
            // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ–º—Å—è –≤ Firebase
            let authResult = try await Auth.auth().signIn(with: credential)
            
            // –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤ —É–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            userId = authResult.user.uid
            currentUserEmail = authResult.user.email
            isAuthenticated = true
            
            print("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Google: \(authResult.user.email ?? "–Ω–µ—Ç email")")
            
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ Google Sign-In: \(error.localizedDescription)")
            syncError = "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google: \(error.localizedDescription)"
            throw error
        }
    }
    
    /// –í—ã—Ö–æ–¥ –∏–∑ Google –∞–∫–∫–∞—É–Ω—Ç–∞
    @MainActor
    func signOutFromGoogle() {
        do {
            try Auth.auth().signOut()
            GIDSignIn.sharedInstance.signOut()
            
            // –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤ —É–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            userId = nil
            currentUserEmail = nil
            isAuthenticated = false
            
            print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ Google –∞–∫–∫–∞—É–Ω—Ç–∞")
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞: \(error.localizedDescription)")
            syncError = "–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞: \(error.localizedDescription)"
        }
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è root view controller
    @MainActor
    private func getRootViewController() -> UIViewController? {
        guard let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
              let window = windowScene.windows.first else {
            return nil
        }
        return window.rootViewController
    }
    
    // MARK: - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –∫–æ–¥—É
    
    /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∫–æ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
    func createNewSyncCode(code: String) async throws {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–¥ –≤ email/password –¥–ª—è Firebase
        let email = "\(code.lowercased())@sync.roommanager.app"
        let password = "SyncCode_\(code)" // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        
        do {
            // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å email/password
            let result = try await Auth.auth().createUser(withEmail: email, password: password)
            await MainActor.run {
                userId = result.user.uid
                isAuthenticated = true
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            let db = Firestore.firestore()
            try await db.collection("sync_codes").document(code).setData([
                "uid": result.user.uid,
                "created": FieldValue.serverTimestamp(),
                "device": UIDevice.current.name
            ])
            
            print("‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–æ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: \(code)")
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–¥–∞: \(error.localizedDescription)")
            throw error
        }
    }
    
    /// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    func signInWithCode(code: String) async throws {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–¥ –≤ email/password –¥–ª—è Firebase
        let email = "\(code.lowercased())@sync.roommanager.app"
        let password = "SyncCode_\(code)" // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        
        do {
            // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            let result = try await Auth.auth().signIn(withEmail: email, password: password)
            await MainActor.run {
                userId = result.user.uid
                isAuthenticated = true
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö
            let db = Firestore.firestore()
            try await db.collection("sync_codes").document(code).updateData([
                "lastLogin": FieldValue.serverTimestamp(),
                "devices": FieldValue.arrayUnion([UIDevice.current.name])
            ])
            
            print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ —Å –∫–æ–¥–æ–º: \(code)")
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —Å –∫–æ–¥–æ–º: \(error.localizedDescription)")
            throw error
        }
    }
    
    // MARK: - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    func getCurrentSyncCode() async -> String? {
        guard let userId = userId else { return nil }
        
        do {
            let db = Firestore.firestore()
            let snapshot = try await db.collection("sync_codes")
                .whereField("uid", isEqualTo: userId)
                .getDocuments()
            
            if let document = snapshot.documents.first {
                return document.documentID
            }
            return nil
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞: \(error.localizedDescription)")
            return nil
        }
    }
    
    // MARK: - Network Monitoring
    
    private func startNetworkMonitoring() {
        networkMonitor.pathUpdateHandler = { [weak self] path in
            DispatchQueue.main.async {
                guard let self = self else { return }
                let wasAvailable = self.isNetworkAvailable
                self.isNetworkAvailable = path.status == .satisfied
                
                if wasAvailable != self.isNetworkAvailable {
                    print("üì∂ –°–µ—Ç—å: \(path.status == .satisfied ? "–î–û–°–¢–£–ü–ù–ê" : "–ù–ï–î–û–°–¢–£–ü–ù–ê")")
                }
                
                self.updateConnectionStatus()
            }
        }
        networkMonitor.start(queue: networkQueue)
        print("üì° –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ç–∏")
    }
    
    private func startConnectionStatusMonitoring() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        connectionCheckTimer = Timer.scheduledTimer(withTimeInterval: 10.0, repeats: true) { [weak self] _ in
            DispatchQueue.main.async {
                self?.updateConnectionStatus()
            }
        }
    }
    
    private func updateConnectionStatus() {
        let now = Date()
        let previousStatus = connectionStatus
        
        if !isNetworkAvailable {
            connectionStatus = .disconnected
            if previousStatus != connectionStatus {
                print("üî¥ –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: DISCONNECTED (–Ω–µ—Ç —Å–µ—Ç–∏)")
            }
            return
        }
        
        if !isAuthenticated {
            connectionStatus = .disconnected
            if previousStatus != connectionStatus {
                print("üî¥ –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: DISCONNECTED (–Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω)")
            }
            return
        }
        
        // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è —É—Å–ø–µ—à–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±—ã–ª–∞ –Ω–µ–¥–∞–≤–Ω–æ (–≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥)
        if let lastSync = lastSyncSuccess, now.timeIntervalSince(lastSync) < 30 {
            connectionStatus = .connected
            if previousStatus != connectionStatus {
                print("üü¢ –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: CONNECTED")
            }
            return
        }
        
        // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±—ã–ª–∞ –±–æ–ª–µ–µ 30 —Å–µ–∫—É–Ω–¥ –Ω–∞–∑–∞–¥, –Ω–æ –µ—Å—Ç—å —Å–µ—Ç—å
        if let lastSync = lastSyncSuccess, now.timeIntervalSince(lastSync) < 120 {
            connectionStatus = .unstable
            if previousStatus != connectionStatus {
                print("üü° –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: UNSTABLE")
            }
            return
        }
        
        // –ï—Å–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ –±—ã–ª–æ –¥–æ–ª–≥–æ –∏–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ –±—ã–ª–æ
        connectionStatus = isNetworkAvailable ? .unstable : .disconnected
        if previousStatus != connectionStatus {
            let status = connectionStatus == .unstable ? "UNSTABLE" : "DISCONNECTED"
            print("üî∂ –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: \(status) (–¥–æ–ª–≥–æ –Ω–µ –±—ã–ª–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)")
        }
    }
    
    // MARK: - –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    
    /// –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–Ω–∞—Ç—ã –≤ Firebase, –¥–æ–±–∞–≤–ª—è—è –±—É–ª–µ–≤—ã –ø–æ–ª—è –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    func migrateExistingRooms() async {
        guard let userId = userId else {
            print("‚ùå –ù–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏")
            return
        }
        
        print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–Ω–∞—Ç...")
        
        do {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã –∏–∑ Firebase
            let snapshot = try await db.collection("users")
                .document(userId)
                .collection("rooms")
                .getDocuments()
            
            let batch = db.batch()
            var updatedCount = 0
            
            for document in snapshot.documents {
                let data = document.data()
                var needsUpdate = false
                var updateData: [String: Any] = [:]
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –±—É–ª–µ–≤—ã –ø–æ–ª—è –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
                if data["isMarked"] == nil {
                    updateData["isMarked"] = false
                    needsUpdate = true
                }
                
                if data["isDeepCleaned"] == nil {
                    updateData["isDeepCleaned"] = false
                    needsUpdate = true
                }
                
                if data["isCompletedBefore930"] == nil {
                    updateData["isCompletedBefore930"] = false
                    needsUpdate = true
                }
                
                if needsUpdate {
                    batch.updateData(updateData, forDocument: document.reference)
                    updatedCount += 1
                    print("üìù –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É: \(data["number"] ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")")
                }
            }
            
            if updatedCount > 0 {
                try await batch.commit()
                print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ–±–Ω–æ–≤–ª–µ–Ω–æ \(updatedCount) –∫–æ–º–Ω–∞—Ç")
            } else {
                print("‚ÑπÔ∏è –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è: –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã —É–∂–µ –∏–º–µ—é—Ç –±—É–ª–µ–≤—ã –ø–æ–ª—è")
            }
            
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: \(error)")
        }
    }
    
    deinit {
        if let authStateListener = authStateListener {
            Auth.auth().removeStateDidChangeListener(authStateListener)
        }
        listener?.remove()
        connectionCheckTimer?.invalidate()
        networkMonitor.cancel()
    }
}

// MARK: - Error Types
enum FirebaseError: LocalizedError {
    case notAuthenticated
    case syncFailed(String)
    
    var errorDescription: String? {
        switch self {
        case .notAuthenticated:
            return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"
        case .syncFailed(let message):
            return "–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: \(message)"
        }
    }
}

// MARK: - Notifications
extension Notification.Name {
    static let roomUpdatedFromFirebase = Notification.Name("roomUpdatedFromFirebase")
    static let roomDeletedFromFirebase = Notification.Name("roomDeletedFromFirebase")
} 