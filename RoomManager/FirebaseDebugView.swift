import SwiftUI
import Firebase
import FirebaseFirestore
import FirebaseAuth

struct FirebaseDebugView: View {
    @ObservedObject private var firebaseManager = FirebaseManager.shared
    @State private var diagnosticInfo = ""
    @State private var isPerformingTest = false
    
    var body: some View {
        ScrollView {
            VStack(alignment: .leading, spacing: 20) {
                Text("Firebase –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
                    .font(.largeTitle)
                    .fontWeight(.bold)
                
                // –°—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                statusSection
                
                // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
                diagnosticSection
                
                // –¢–µ—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
                actionButtons
                
                // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                if !diagnosticInfo.isEmpty {
                    VStack(alignment: .leading) {
                        Text("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
                            .font(.headline)
                        
                        Text(diagnosticInfo)
                            .font(.system(.body, design: .monospaced))
                            .padding()
                            .background(Color.black.opacity(0.1))
                            .cornerRadius(8)
                    }
                }
            }
            .padding()
        }
        .onAppear {
            runDiagnostics()
        }
    }
    
    // MARK: - UI Sections
    
    private var statusSection: some View {
        VStack(alignment: .leading, spacing: 8) {
            Text("–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                .font(.headline)
            
            HStack {
                Circle()
                    .fill(firebaseManager.isAuthenticated ? Color.green : Color.red)
                    .frame(width: 12, height: 12)
                
                Text(firebaseManager.isAuthenticated ? "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ" : "–û—Ç–∫–ª—é—á–µ–Ω–æ")
            }
            
            if let lastSync = firebaseManager.lastSyncTime {
                Text("–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: \(lastSync, formatter: dateFormatter)")
                    .font(.subheadline)
            }
            
            if let error = firebaseManager.syncError {
                Text("–û—à–∏–±–∫–∞: \(error)")
                    .foregroundColor(.red)
                    .font(.subheadline)
            }
        }
        .padding()
        .background(Color.secondary.opacity(0.1))
        .cornerRadius(12)
    }
    
    private var diagnosticSection: some View {
        VStack(alignment: .leading, spacing: 8) {
            Text("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
                .font(.headline)
            
            Text("Bundle ID: \(Bundle.main.bundleIdentifier ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")")
            
            Button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É") {
                runDiagnostics()
            }
            .buttonStyle(.bordered)
        }
        .padding()
        .background(Color.secondary.opacity(0.1))
        .cornerRadius(12)
    }
    
    private var actionButtons: some View {
        VStack(spacing: 12) {
            Button(action: {
                Task {
                    await connectToFirebase()
                }
            }) {
                HStack {
                    Image(systemName: "link")
                    Text("–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
                }
                .frame(maxWidth: .infinity)
            }
            .buttonStyle(.borderedProminent)
            .disabled(firebaseManager.isAuthenticated || isPerformingTest)
            
            Button(action: {
                Task {
                    await testWrite()
                }
            }) {
                HStack {
                    Image(systemName: "square.and.pencil")
                    Text("–¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏")
                }
                .frame(maxWidth: .infinity)
            }
            .buttonStyle(.bordered)
            .disabled(!firebaseManager.isAuthenticated || isPerformingTest)
            
            Button(action: {
                Task {
                    await testRead()
                }
            }) {
                HStack {
                    Image(systemName: "doc.text.magnifyingglass")
                    Text("–¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è")
                }
                .frame(maxWidth: .infinity)
            }
            .buttonStyle(.bordered)
            .disabled(!firebaseManager.isAuthenticated || isPerformingTest)
            
            Button(action: {
                checkFirebaseConfig()
            }) {
                HStack {
                    Image(systemName: "info.circle")
                    Text("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                }
                .frame(maxWidth: .infinity)
            }
            .buttonStyle(.bordered)
        }
    }
    
    // MARK: - Actions
    
    private func runDiagnostics() {
        var info = ""
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ Bundle ID
        if let bundleID = Bundle.main.bundleIdentifier {
            info += "üì± Bundle ID –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: \(bundleID)\n"
        } else {
            info += "‚ùå Bundle ID –Ω–µ –Ω–∞–π–¥–µ–Ω\n"
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è GoogleService-Info.plist
        if let path = Bundle.main.path(forResource: "GoogleService-Info", ofType: "plist") {
            info += "‚úÖ GoogleService-Info.plist –Ω–∞–π–¥–µ–Ω: \(path)\n"
            
            if let dict = NSDictionary(contentsOfFile: path) {
                if let projectID = dict["PROJECT_ID"] as? String {
                    info += "üî• Firebase Project ID: \(projectID)\n"
                }
                
                if let configBundleID = dict["BUNDLE_ID"] as? String {
                    info += "üìÑ Firebase Bundle ID: \(configBundleID)\n"
                    
                    if configBundleID != Bundle.main.bundleIdentifier {
                        info += "‚ö†Ô∏è –û–®–ò–ë–ö–ê: Bundle ID –≤ GoogleService-Info.plist –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å Bundle ID –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n"
                    }
                }
            } else {
                info += "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å GoogleService-Info.plist\n"
            }
        } else {
            info += "‚ùå GoogleService-Info.plist –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ—Å—É—Ä—Å–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n"
        }
        
        // –°—Ç–∞—Ç—É—Å Firebase
        if FirebaseApp.app() != nil {
            info += "‚úÖ Firebase SDK –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n"
        } else {
            info += "‚ùå Firebase SDK –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n"
        }
        
        // –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if Auth.auth().currentUser != nil {
            info += "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω\n"
            info += "üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \(Auth.auth().currentUser?.uid ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")\n"
        } else {
            info += "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω\n"
        }
        
        diagnosticInfo = info
    }
    
    private func connectToFirebase() async {
        isPerformingTest = true
        do {
            try await firebaseManager.signInAnonymously()
            diagnosticInfo += "‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Firebase\n"
        } catch {
            diagnosticInfo += "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: \(error.localizedDescription)\n"
        }
        isPerformingTest = false
        runDiagnostics()
    }
    
    private func testWrite() async {
        isPerformingTest = true
        diagnosticInfo += "üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ Firestore...\n"
        
        guard let userId = Auth.auth().currentUser?.uid else {
            diagnosticInfo += "‚ùå –ù–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            isPerformingTest = false
            return
        }
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        let db = Firestore.firestore()
        let testDoc = db.collection("users").document(userId).collection("test").document("test-doc")
        
        do {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º throw, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä—É, —á—Ç–æ –æ—à–∏–±–∫–∞ –≤–æ–∑–º–æ–∂–Ω–∞
            let data: [String: Any] = [
                "timestamp": FieldValue.serverTimestamp(),
                "deviceInfo": UIDevice.current.name,
                "testValue": "test-\(Int.random(in: 1...1000))"
            ]
            
            try await testDoc.setData(data)
            diagnosticInfo += "‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω\n"
        } catch {
            diagnosticInfo += "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: \(error.localizedDescription)\n"
        }
        
        isPerformingTest = false
    }
    
    private func testRead() async {
        isPerformingTest = true
        diagnosticInfo += "üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á—Ç–µ–Ω–∏—è –∏–∑ Firestore...\n"
        
        guard let userId = Auth.auth().currentUser?.uid else {
            diagnosticInfo += "‚ùå –ù–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            isPerformingTest = false
            return
        }
        
        let db = Firestore.firestore()
        
        do {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–≤–Ω—ã–π throw, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä—É, —á—Ç–æ –æ—à–∏–±–∫–∞ –≤–æ–∑–º–æ–∂–Ω–∞
            let testDocRef = db.collection("users").document(userId).collection("test").document("test-doc")
            let testDoc = try await testDocRef.getDocument()
            
            if testDoc.exists {
                if let data = testDoc.data() {
                    diagnosticInfo += "‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω\n"
                    diagnosticInfo += "üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: \(data)\n"
                } else {
                    diagnosticInfo += "‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã\n"
                }
            } else {
                diagnosticInfo += "‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
                
                // –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ test
                let testDocs = try await db.collection("users").document(userId).collection("test").getDocuments()
                diagnosticInfo += "üìö –ù–∞–π–¥–µ–Ω–æ \(testDocs.documents.count) –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ test\n"
            }
        } catch {
            diagnosticInfo += "‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: \(error.localizedDescription)\n"
        }
        
        isPerformingTest = false
    }
    
    private func checkFirebaseConfig() {
        diagnosticInfo = "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Firebase...\n"
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Firebase
        if let path = Bundle.main.path(forResource: "GoogleService-Info", ofType: "plist"),
           let dict = NSDictionary(contentsOfFile: path) {
            
            diagnosticInfo += "üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ GoogleService-Info.plist:\n"
            
            // –í—ã–≤–æ–¥ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            let keysToShow = ["PROJECT_ID", "BUNDLE_ID", "API_KEY", "GCM_SENDER_ID", 
                              "STORAGE_BUCKET", "IS_ADS_ENABLED", "IS_ANALYTICS_ENABLED", 
                              "IS_APPINVITE_ENABLED", "IS_GCM_ENABLED", "IS_SIGNIN_ENABLED"]
            
            for key in keysToShow {
                if let value = dict[key] {
                    if key == "API_KEY" {
                        // –°–∫—Ä—ã–≤–∞–µ–º API –∫–ª—é—á –≤ —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                        if let apiKey = value as? String, apiKey.count > 8 {
                            let maskedKey = String(apiKey.prefix(4)) + "..." + String(apiKey.suffix(4))
                            diagnosticInfo += "üîë \(key): \(maskedKey)\n"
                        } else {
                            diagnosticInfo += "üîë \(key): [—Å–∫—Ä—ã—Ç–æ]\n"
                        }
                    } else {
                        diagnosticInfo += "üìå \(key): \(value)\n"
                    }
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ Bundle ID
            if let bundleID = Bundle.main.bundleIdentifier,
               let configBundleID = dict["BUNDLE_ID"] as? String {
                if bundleID != configBundleID {
                    diagnosticInfo += "\n‚ö†Ô∏è –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï: Bundle ID –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (\(bundleID)) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å Bundle ID –≤ GoogleService-Info.plist (\(configBundleID))\n"
                    diagnosticInfo += "üëâ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: –°–º–æ—Ç—Ä–∏—Ç–µ README_FIREBASE.md –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ —Ä–µ—à–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º—ã\n"
                } else {
                    diagnosticInfo += "\n‚úÖ Bundle ID —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Firebase\n"
                }
            }
        } else {
            diagnosticInfo += "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å GoogleService-Info.plist\n"
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase
        if FirebaseApp.app() != nil {
            diagnosticInfo += "\n‚úÖ Firebase SDK —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n"
        } else {
            diagnosticInfo += "\n‚ùå Firebase SDK –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n"
        }
    }
    
    // MARK: - Helpers
    
    private let dateFormatter: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateStyle = .short
        formatter.timeStyle = .medium
        return formatter
    }()
}

struct FirebaseDebugView_Previews: PreviewProvider {
    static var previews: some View {
        FirebaseDebugView()
    }
} 