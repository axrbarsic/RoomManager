import SwiftUI
import AVFoundation
import Combine
import Charts
import Metal
import simd
import PhotosUI
import AVKit
import UniformTypeIdentifiers

// MARK: - –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ü–∏—Ñ—Ä —ç—Ç–∞–∂–µ–π
struct AdaptiveFloorLabel: View {
    let floor: Int
    let width: CGFloat
    let height: CGFloat
    
    @State private var textColor: Color = .white
    @State private var timer: Timer?
    
    var body: some View {
        Text("\(floor)")
            .font(.headline)
            .fontWeight(.bold)
            .foregroundColor(textColor)
            .frame(width: width, height: height)
            .background(Color.clear)
            .onAppear {
                startColorAdaptation()
            }
            .onDisappear {
                stopColorAdaptation()
            }
    }
    
    private func startColorAdaptation() {
        // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π —Ä–µ–∞–∫—Ü–∏–∏
        timer = Timer.scheduledTimer(withTimeInterval: 1.0/120.0, repeats: true) { _ in
            updateTextColor()
        }
    }
    
    private func stopColorAdaptation() {
        timer?.invalidate()
        timer = nil
    }
    
    private func updateTextColor() {
        let time = Date().timeIntervalSince1970
        let position = Double(floor - 1) / 4.0 // 0 to 1 –¥–ª—è —ç—Ç–∞–∂–µ–π 1-5
        
        // –ë—ã—Å—Ç—Ä–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —è—Ä–∫–æ—Å—Ç–∏ —Ñ–æ–Ω–∞
        let speed = 8.0 // –£–≤–µ–ª–∏—á–µ–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –¥–ª—è –±–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
        let phase = position * .pi * 4 // –ë–æ–ª—å—à–∏–π —Ñ–∞–∑–æ–≤—ã–π —Å–¥–≤–∏–≥ –º–µ–∂–¥—É —ç—Ç–∞–∂–∞–º–∏
        
        // –ü—Ä–æ—Å—Ç–∞—è —Å–∏–Ω—É—Å–æ–∏–¥–∞ –¥–ª—è —á–µ—Ç–∫–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
        let wave = sin(time * speed + phase)
        
        // –ß–µ—Ç–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ: >0 = —Ç–µ–º–Ω—ã–π —Ñ–æ–Ω (–±–µ–ª—ã–π —Ç–µ–∫—Å—Ç), <0 = —Å–≤–µ—Ç–ª—ã–π —Ñ–æ–Ω (—á–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç)
        let newColor: Color = wave > 0 ? .white : .black
        
        // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        textColor = newColor
    }
}

// MARK: - –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

struct ContentView: View {
    @StateObject var viewModel = RoomViewModel()
    @ObservedObject private var floorManager = FloorManager.shared
    @ObservedObject private var firebaseManager = FirebaseManager.shared
    @State private var enteredRoomNumber: String = ""
    @State private var showAlert = false
    @State private var alertMessage = ""
    @State private var showToast = false
    @State private var toastMessage = ""
    @State private var selectedTime = Calendar.current.date(bySettingHour: 12, minute: 0, second: 0, of: Date()) ?? Date()
    @State private var isLocked = false
    @AppStorage("isRoundedView") private var isRoundedView = false
    @State private var selectedFilter: Room.RoomColor? = nil
    @State private var previousFilter: Room.RoomColor? = nil
    @State private var combinedFilterCycleState: Int = 0 // 0: None, 1: R+P, 2: R+Y, 3: R+P+Y
    @AppStorage("isVerticalLayout") private var isVerticalLayout = false
    @AppStorage("disableClipboard") private var disableClipboard = false
    @AppStorage("includeSpanish") private var includeSpanish = true
    @AppStorage("redMessageTemplate") private var redMessageTemplate = "%@ I received this room at %@"
    @AppStorage("greenMessageTemplate") private var greenMessageTemplate = "%@ room stripped at %@"
    @AppStorage("redMessageTemplateES") private var redMessageTemplateES = "habitaci√≥n %@ recibida a las %@"
    @AppStorage("greenMessageTemplateES") private var greenMessageTemplateES = "habitaci√≥n %@ limpiada a las %@"
    @AppStorage("enableRedClipboard") private var enableRedClipboard = true
    @AppStorage("enableGreenClipboard") private var enableGreenClipboard = true
    @AppStorage("useOldColorTap") private var useOldColorTap = false  // Toggle for old single-tap color cycle mode
    @State private var showActionHistory = false
    @ObservedObject private var actionHistoryManager = ActionHistoryManager.shared
    @State private var showWhiteLegend = false
    @State private var selectedRoom: Room?
    @State private var backgroundLoadTask: Task<Void, Never>? = nil
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    @State private var shouldShowKeyboard = true
    @State private var keyboardTimer: Timer? = nil
    @State private var lastInputTime: Date = Date()
    private let keyboardTimeout: TimeInterval = 3.0
    
    @State private var isListViewMode = false // –ù–æ–≤—ã–π —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
    @State private var selectedListColor: Room.RoomColor? = nil // –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è —Å–ø–∏—Å–∫–∞
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–æ–Ω–∞
    @AppStorage("showCustomBackground") private var showCustomBackground = false
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—ã–±–æ—Ä–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    @State private var selectedImageItem: PhotosPickerItem? = nil
    @State private var backgroundImage: UIImage?
    @AppStorage("blurRadius") private var blurRadius: Double = 10.0
    // 0: Fill, 1: Fit, 2: Stretch, 3: Original
    @AppStorage("backgroundImageContentMode") private var backgroundImageContentMode: Int = 0
    
    // –î–æ–±–∞–≤–ª–µ–Ω–æ: —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ
    @State private var selectedVideoItem: PhotosPickerItem?
    @State private var backgroundVideoURL: URL?
    @State private var loopingPlayer: AVQueuePlayer?
    @State private var playerLooper: AVPlayerLooper?
    
    // URL –¥–ª—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
    private let bundledVideoName = "VID_20220715_224938_580" // –ò–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    private let bundledVideoExtension = "mov" // –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞

    var bundledVideoURL: URL? {
        Bundle.main.url(forResource: bundledVideoName, withExtension: bundledVideoExtension)
    }
    
    // –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã–º –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º
    enum ActiveSheet: Identifiable, CaseIterable { // –î–æ–±–∞–≤–ª–µ–Ω–æ CaseIterable
        case settings, imagePicker, timePicker, numberSelection, actionHistory

        var id: Int {
            hashValue
        }
    }
    @State private var activeSheet: ActiveSheet?
    
    var keyboardPublisher: AnyPublisher<Bool, Never> {
        Publishers.Merge(
            NotificationCenter.default.publisher(for: UIResponder.keyboardWillShowNotification).map { _ in true },
            NotificationCenter.default.publisher(for: UIResponder.keyboardWillHideNotification).map { _ in false }
        ).eraseToAnyPublisher()
    }
    
    private func provideHapticFeedback() {
        let generator = UIImpactFeedbackGenerator(style: .medium)
        generator.prepare()
        generator.impactOccurred()
    }
    
    private func handleColorTap(_ color: Room.RoomColor) {
        provideHapticFeedback()
        
        // –ï—Å–ª–∏ –º—ã —É–∂–µ –≤ —Ä–µ–∂–∏–º–µ —Å–ø–∏—Å–∫–∞ –∏ –Ω–∞–∂–∞–ª–∏ –Ω–∞ —Ç–æ—Ç –∂–µ —Ü–≤–µ—Ç - –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ —Å–ø–∏—Å–∫–∞
        if isListViewMode && selectedListColor == color {
            isListViewMode = false
            selectedListColor = nil
            return
        } else {
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º —Å–ø–∏—Å–∫–∞
            isListViewMode = true
            selectedListColor = color
        }
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
        recordFilterChange(
            name: "colorFilter",
            prevFilter: nil,
            newFilter: selectedListColor
        )
    }
    
    private func handleColorFilterTap(_ color: Room.RoomColor) {
        provideHapticFeedback()
        
        combinedFilterCycleState = 0 // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ
        
        let prevFilter = selectedFilter // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
        
        if selectedFilter == color {
            selectedFilter = nil // –ï—Å–ª–∏ —Ç–∞–ø–Ω—É–ª–∏ –ø–æ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–≥–æ
            previousFilter = nil
            recordFilterChange(
                name: "", // –ü—É—Å—Ç–æ–µ –∏–º—è –¥–ª—è –æ–±—â–µ–≥–æ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–∞
                prevFilter: prevFilter,
                newFilter: nil
            )
        } else {
            selectedFilter = color // –ò–Ω–∞—á–µ - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä
            previousFilter = color // previousFilter —Ç—É—Ç —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å selectedFilter
            recordFilterChange(
                name: "", // –ü—É—Å—Ç–æ–µ –∏–º—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞
                prevFilter: prevFilter, // –ú–æ–∂–µ—Ç –±—ã—Ç—å nil –∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Ü–≤–µ—Ç–æ–º
                newFilter: color
            )
        }
    }
    
    private func resetFilters() {
        provideHapticFeedback()
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏—é
        let prevFilter = selectedFilter
        
        selectedFilter = nil
        previousFilter = nil
        combinedFilterCycleState = 0
        
        recordFilterChange(
            name: "",
            prevFilter: prevFilter,
            newFilter: nil
        )
    }
    
    var body: some View {
        buildMainView()
            .onAppear {
                loadBackgroundImage()
                loadBackgroundVideo()
                // ULTRA PERFORMANCE: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ ProMotion 120fps
                HighPerformanceEffectManager.shared.forceUpdateFrameRate()
                print("üöÄ ULTRA: ContentView activated ProMotion 120fps")
            }
    }
    
    // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
    private func buildMainView() -> some View {
        NavigationView {
            GeometryReader { outerGeo in
                buildContentView(outerGeo: outerGeo)
            }
            .background(
                Group {
                    if showCustomBackground {
                        // –í–∏–¥–µ–æ-—Ñ–æ–Ω –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ URL
                        if let currentURL = backgroundVideoURL, let player = loopingPlayer {
                            let gravity: AVLayerVideoGravity = (currentURL == bundledVideoURL) ? .resizeAspectFill : .resize
                            CustomVideoPlayerView(player: player, videoGravityForPlayer: gravity)
                                .frame(maxWidth: .infinity, maxHeight: .infinity) // –ó–∞–ø–æ–ª–Ω—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
                                .clipped() // –û–±—Ä–µ–∑–∞–µ—Ç –∏–∑–ª–∏—à–∫–∏
                                .ignoresSafeArea() // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–æ–Ω—ã
                                .onAppear { player.play() } // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–µ–µ—Ä –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏
                        } else if let backgroundImage = backgroundImage {
                            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ñ–æ—Ç–æ –∫–∞–∫ —Ñ–æ–Ω —Å —Ä–∞–∑–º—ã—Ç–∏–µ–º
                            Image(uiImage: backgroundImage)
                                .resizable() // –í—Å–µ–≥–¥–∞ resizable
                                .applyScalingMode(mode: backgroundImageContentMode, sourceImageSize: backgroundImage.size)
                                .frame(maxWidth: .infinity, maxHeight: .infinity)
                                .clipped() // –û–±—Ä–µ–∑–∞–µ–º, –µ—Å–ª–∏ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ —Ä–∞–º–∫–∏ (–æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è Fill –∏ Original)
                                .blur(radius: blurRadius)
                                .overlay(Color.black.opacity(0.2))
                                .ignoresSafeArea()
                        } else {
                            // –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω
                            Color.green
                                .opacity(0.7)
                                .blur(radius: 10)
                                .overlay(Color.black.opacity(0.2))
                                .ignoresSafeArea()
                        }
                    }
                }
            )
        }
        .preferredColorScheme(.dark)
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω .sheet(item: content:) –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è
        .sheet(item: $activeSheet) { item in
            switch item {
            case .settings:
                SettingsView(
                    viewModel: viewModel,
                    isLocked: isLocked,
                    clearAllData: {
                        viewModel.clearAllRooms()
                        actionHistoryManager.clearHistory()
                    },
                    showCustomBackground: $showCustomBackground,
                    requestImagePickerPresentation: {
                        self.activeSheet = nil
                        DispatchQueue.main.async {
                            self.activeSheet = .imagePicker
                        }
                    },
                    backgroundImage: $backgroundImage,
                    selectedImageItem: $selectedImageItem
                )
            case .imagePicker:
            backgroundPickerView
            case .timePicker:
                TimePickerView(
                    viewModel: viewModel,
                    selectedTime: $selectedTime,
                    onSave: setRoomTime
                )
            case .numberSelection:
                NumberSelectionView(viewModel: viewModel)
                    .onDisappear { 
                        shouldShowKeyboard = false
                        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) { shouldShowKeyboard = true }
                    }
            case .actionHistory:
                SimpleHistoryView(viewModel: viewModel)
            }
        }
    }
    
    // –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    private var backgroundPickerView: some View {
        NavigationView {
            ScrollView {
            VStack(spacing: 20) {
                    // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
                    Button(action: {
                        setBundledVideoAsBackground()
                    }) {
                        Label(viewModel.getTranslation(for: "selectBundledVideo"), systemImage: "film")
                            .frame(maxWidth: .infinity)
                            .padding()
                            .background(Color.orange) // –î—Ä—É–≥–æ–π —Ü–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∏—á–∏—è
                            .foregroundColor(.white)
                            .cornerRadius(10)
                    }

                // –í—ã–±–æ—Ä –≤–∏–¥–µ–æ
                PhotosPicker(
                    selection: $selectedVideoItem,
                    matching: .videos,
                    photoLibrary: .shared()
                ) {
                        Label(viewModel.getTranslation(for: "selectVideo"), systemImage: "video")
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(Color.purple)
                        .foregroundColor(.white)
                        .cornerRadius(10)
                }
                .onChange(of: selectedVideoItem) { newItem in
                    guard let newItem = newItem else { return }

                        backgroundLoadTask?.cancel()
                        backgroundLoadTask = Task {
                            do {
                                guard let data = try await newItem.loadTransferable(type: Data.self) else {
                                    if Task.isCancelled { print("Video load cancelled after trying to load data."); return }
                                    await MainActor.run { self.selectedVideoItem = nil }
                                    return
                                }
                                if Task.isCancelled { print("Video load cancelled after data loaded."); return }

                            let docs = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)[0]
                            let target = docs.appendingPathComponent("backgroundVideo.mov")
                                
                                // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ—Å—Ç—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏
                            try? FileManager.default.removeItem(at: target)
                                if Task.isCancelled { print("Video load cancelled before writing file."); return }
                                
                                try data.write(to: target)
                                if Task.isCancelled { print("Video load cancelled after writing file."); return }
                                    
                                await MainActor.run {
                                    if Task.isCancelled { print("Video load cancelled just before MainActor.run."); return }
                                    self.backgroundVideoURL = target
                                    self.backgroundImage = nil
                                    self.selectedImageItem = nil
                                    self.loopingPlayer?.pause()
                                    self.loopingPlayer = nil
                                    self.playerLooper = nil
                                    UserDefaults.standard.removeObject(forKey: "backgroundImageData")
                                    saveBackgroundVideoURL(target)
                                    setupVideoPlayer(url: target)
                                    self.selectedVideoItem = nil
                                }
                            } catch {
                                if Task.isCancelled {
                                    print("Video load task was cancelled with error: \\(error)")
                                } else {
                                    print("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ-—Ñ–æ–Ω–∞: \\(error)")
                            }
                                 await MainActor.run { self.selectedVideoItem = nil }
                        }
                    }
                }
                // –ü—Ä–µ–≤—å—é –≤–∏–¥–µ–æ –∏ –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
                    if let currentURL = backgroundVideoURL, let player = loopingPlayer {
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º videoGravity –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç URL
                    let gravity: AVLayerVideoGravity = (currentURL == bundledVideoURL) ? .resizeAspectFill : .resize
                    CustomVideoPlayerView(player: player, videoGravityForPlayer: gravity)
                        .frame(height: 200)
                        .cornerRadius(10)
                        Button(viewModel.getTranslation(for: "deleteVideo")) {
                        clearBackgroundVideo()
                    }
                    .foregroundColor(.red)
                    .padding(.top)
                }
                    Text(viewModel.getTranslation(for: "chooseBackgroundImagePrompt"))
                    .font(.headline)
                
                PhotosPicker(
                    selection: $selectedImageItem,
                    matching: .images,
                    photoLibrary: .shared()
                ) {
                        Label(viewModel.getTranslation(for: "selectFromGallery"), systemImage: "photo.on.rectangle")
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(Color.blue)
                        .foregroundColor(.white)
                        .cornerRadius(10)
                }
                .onChange(of: selectedImageItem) { newItem in
                    guard let newItem = newItem else { return }

                        backgroundLoadTask?.cancel()
                        backgroundLoadTask = Task {
                            do {
                                guard let data = try await newItem.loadTransferable(type: Data.self) else {
                                    if Task.isCancelled { print("Image load cancelled after trying to load data."); return }
                                    await MainActor.run { self.selectedImageItem = nil }
                                    return
                                }
                                if Task.isCancelled { print("Image load cancelled after data loaded."); return }

                                guard let uiImage = UIImage(data: data) else {
                                    if Task.isCancelled { print("Image load cancelled after trying to create UIImage."); return }
                                    await MainActor.run { self.selectedImageItem = nil }
                                    return
                                }
                                
                                if Task.isCancelled { print("Image load cancelled before updating state."); return }
                                
                                await MainActor.run {
                                    if Task.isCancelled { print("Image load cancelled just before MainActor.run."); return }
                                    self.backgroundImage = uiImage
                                    self.backgroundVideoURL = nil
                                    self.loopingPlayer?.pause()
                                    self.loopingPlayer = nil
                                    self.playerLooper = nil
                                    UserDefaults.standard.removeObject(forKey: "backgroundVideoPath")
                                    self.selectedVideoItem = nil
                            saveBackgroundImage()
                                    self.selectedImageItem = nil // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏ –≤–∞–∂–Ω–æ!
                                }
                            } catch {
                                if Task.isCancelled {
                                    print("Image load task was cancelled with error: \\(error)")
                                } else {
                                    print("Error loading image: \\(error)")
                                }
                                await MainActor.run { self.selectedImageItem = nil }
                        }
                    }
                }
                
                if let backgroundImage = backgroundImage {
                        // –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º —Ä–∞–∑–º—ã—Ç–∏—è –∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ä–µ–∂–∏–º–æ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
                        Image(uiImage: backgroundImage)
                            .resizable()
                            .scaledToFit() // –ò–ó–ú–ï–ù–ï–ù–û: –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å scaledToFit –¥–ª—è –ø—Ä–µ–≤—å—é
                            .frame(height: 200) // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è –ø—Ä–µ–≤—å—é
                            .clipped() // –í–∞–∂–Ω–æ –¥–ª—è –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤, —á—Ç–æ–±—ã –≤–ø–∏—Å–∞—Ç—å—Å—è –≤ frame
                            .blur(radius: blurRadius) // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞–∑–º—ã—Ç–∏–µ –∫ –µ–¥–∏–Ω–æ–º—É –ø—Ä–µ–≤—å—é
                            .overlay(Color.black.opacity(0.2))
                            .cornerRadius(10)

                        Text(viewModel.getTranslation(for: "imageScalingModePrompt"))
                            .font(.subheadline)
                            .padding(.top)
                        Picker(viewModel.getTranslation(for: "imageScalingModePrompt"), selection: $backgroundImageContentMode) {
                            Text(viewModel.getTranslation(for: "scalingModeFill")).tag(0)
                            Text(viewModel.getTranslation(for: "scalingModeFit")).tag(1)
                            Text(viewModel.getTranslation(for: "scalingModeStretch")).tag(2)
                            Text(viewModel.getTranslation(for: "scalingModeOriginal")).tag(3)
                        }
                        .pickerStyle(SegmentedPickerStyle())
                        .padding(.horizontal)
                        
                        Text(viewModel.getTranslation(for: "blurIntensityPrompt"))
                        .font(.subheadline)
                    
                    Slider(value: $blurRadius, in: 0...25, step: 1)
                        .padding(.horizontal)
                    
                    Text(String(format: "%.0f", blurRadius))
                        .font(.caption)
                    
                        Button(viewModel.getTranslation(for: "deleteImage")) {
                        self.backgroundImage = nil
                        self.selectedImageItem = nil
                        UserDefaults.standard.removeObject(forKey: "backgroundImageData")
                    }
                    .foregroundColor(.red)
                    .padding(.top)
                }
                
                Spacer()
            }
            .padding()
                .frame(maxWidth: .infinity) // –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —à–∏—Ä–∏–Ω—ã VStack
            }
            .navigationBarTitle(viewModel.getTranslation(for: "backgroundSettingsTitle"), displayMode: .inline)
            .navigationBarItems(
                trailing: Button(viewModel.getTranslation(for: "doneButton")) {
                    activeSheet = nil // –ó–∞–∫—Ä—ã–≤–∞–µ–º imagePicker
                }
            )
        }
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    private func buildContentView(outerGeo: GeometryProxy) -> some View {
        ScrollView(.vertical, showsIndicators: false) {
            GeometryReader { geometry in
                Color.clear.preference(
                    key: ScrollOffsetPreferenceKey.self,
                    value: geometry.frame(in: .named("scrollView")).minY
                )
            }
            .frame(height: 0)
            
            VStack(alignment: .center, spacing: 20) {
                buildFloorsSection()
            }
            .centeredWithPadding()
            .padding(.top, 8)
            .padding(.bottom, 20)
            .onTapGesture { hideKeyboard() }
        }
        // SMART PERFORMANCE: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä —Å–∫—Ä–æ–ª–ª–∞
        .simultaneousGesture(
            DragGesture(minimumDistance: 1)
                .onChanged { _ in 
                    // –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ —Å–∫—Ä–æ–ª–ª–∞
                    HighPerformanceEffectManager.shared.startScrollDetection()
                }
                .onEnded { _ in 
                    // ULTRA: –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ - –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –ª–æ–≥–∏–∫–∞ —Å–∞–º–∞ —É–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
                    HighPerformanceEffectManager.shared.stopScrollDetection()
                }
        )
        .coordinateSpace(name: "scrollView")
        .onPreferenceChange(ScrollOffsetPreferenceKey.self) { value in
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∫—Ä–æ–ª–ª–∞
            handleScrollChange(value: value)
        }
        .scrollIndicators(.hidden)
        .scrollDisabled(false)
        .scrollDismissesKeyboard(.immediately)
        // ULTRA PERFORMANCE: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –≤—ã—Å–æ–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        .background(
            // –°–æ–∑–¥–∞–µ–º invisible view –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω—É–∂–¥–∞–µ—Ç –∫ –≤—ã—Å–æ–∫–æ–º—É FPS
            Color.clear
                .onAppear {
                    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã—Å–æ–∫—É—é —á–∞—Å—Ç–æ—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    HighPerformanceEffectManager.shared.forceUpdateFrameRate()
                }
        )
        // –û—Ç–∫–ª—é—á–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–∫—Ä–æ–ª–ª–æ–º
        .animation(.none, value: isLocked)
        .animation(.none, value: selectedFilter)
        .overlay(
            Group {
                if showToast {
                    ToastView(message: toastMessage, isShowing: $showToast)
                        .zIndex(100)
                }
            }
        ) // –í—Å–ø–ª—ã–≤–∞—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å—á–µ–∑–∞—é—Ç —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        .overlay(
            SmartFloatingMenu(
                viewModel: viewModel,
                getTranslation: { key in viewModel.getTranslation(for: key) },
                onAction: handleFloatingMenuAction
            )
            .zIndex(999) // –ü–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ –≤–∫–ª—é—á–∞—è toast
        )
        .toolbar {
            ToolbarItem(placement: .principal) {
                buildToolbarContent()
            }
        }
        .onReceive(keyboardPublisher) { isVisible in
            if isVisible { startKeyboardTimer() } else { stopKeyboardTimer() }
        }
        .onReceive(NotificationCenter.default.publisher(for: UIApplication.willResignActiveNotification)) { _ in stopKeyboardTimer() }
        .onReceive(NotificationCenter.default.publisher(for: UIApplication.didBecomeActiveNotification)) { _ in startKeyboardTimer() }
        .navigationViewStyle(StackNavigationViewStyle())
    }
    
    // –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    private func buildToolbarContent() -> some View {
        GeometryReader { geo in
            let totalWidth = geo.size.width
            HStack(spacing: 2) {
                buildRoomNumberField(width: totalWidth)
                
                // –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ü–≤–µ—Ç–Ω—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤
                buildColorCounters(width: totalWidth)
                
                Spacer(minLength: 1)
                
                // –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                buildControlButtons(width: totalWidth)
            }
        }
        .frame(height: 44)
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–µ –¥–ª—è –Ω–æ–º–µ—Ä–∞ –∫–æ–º–Ω–∞—Ç—ã
    private func buildRoomNumberField(width: CGFloat) -> some View {
        let calculatedWidth = width * 0.18
        let fieldFrameWidth = max(50, min(70, calculatedWidth))
        
        // –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        let connectionBackgroundColor: Color = {
            switch firebaseManager.connectionStatus {
            case .connected:
                return Color.green.opacity(0.4)  // –ó–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
            case .unstable:
                return Color.yellow.opacity(0.4) // –ñ–µ–ª—Ç—ã–π —Ñ–æ–Ω –ø—Ä–∏ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Å–≤—è–∑–∏
            case .disconnected:
                return Color.red.opacity(0.4)    // –ö—Ä–∞—Å–Ω—ã–π —Ñ–æ–Ω –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Å–≤—è–∑–∏
            }
        }()

        return TextField(
            {
                // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫ (—Å —É—á–µ—Ç–æ–º –≤–∏–¥–∏–º–æ—Å—Ç–∏ –±–µ–ª—ã—Ö)
                let totalRooms = viewModel.hideWhiteRooms 
                    ? viewModel.visibleRooms.filter { $0.color != .white }.count 
                    : viewModel.visibleRooms.count
                    
                // –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —è—á–µ–π–∫–∏ (–∑–µ–ª–µ–Ω—ã–µ –∏ —Å–∏–Ω–∏–µ)
                let completedRooms = viewModel.visibleRooms.filter { $0.color == .green || $0.color == .blue }.count
                
                // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫ (–±–µ–∑ –∑–µ–ª–µ–Ω—ã—Ö –∏ —Å–∏–Ω–∏—Ö)
                let nonCompletedRooms = totalRooms - completedRooms
                    
                return "\(totalRooms)/\(nonCompletedRooms)"
            }(),
            text: $enteredRoomNumber
        )
        .textFieldStyle(PlainTextFieldStyle()) // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å—Ç–∏–ª–∏
        .keyboardType(.numberPad)
        .frame(width: fieldFrameWidth, height: 36)
        .font(.system(size: 17, weight: .medium))
        .minimumScaleFactor(0.6)
        .multilineTextAlignment(.center)
        .disabled(isLocked || !shouldShowKeyboard)
        .background(
            RoundedRectangle(cornerRadius: 8)
                .foregroundColor(connectionBackgroundColor)
                .overlay(
                    RoundedRectangle(cornerRadius: 8)
                        .stroke(Color.gray.opacity(0.6), lineWidth: 1)
                )
        )
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –ü–û–°–õ–ï background
        .foregroundStyle(Color.black) // –ò—Å–ø–æ–ª—å–∑—É–µ–º foregroundStyle –≤–º–µ—Å—Ç–æ foregroundColor
        .accentColor(.black) // –ß–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç –∫—É—Ä—Å–æ—Ä–∞
        .tint(.black) // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º tint color
        .colorScheme(.light) // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤–µ—Ç–ª—É—é —Å—Ö–µ–º—É –¥–ª—è TextField
        .animation(.easeInOut(duration: 0.3), value: firebaseManager.connectionStatus)
        .gesture(
            DragGesture(minimumDistance: 10)
                .onEnded { value in
                    if value.translation.width < 0 {
                        withAnimation { activeSheet = .numberSelection }
                        provideHapticFeedback()
                    }
                }
        )
        .onChange(of: enteredRoomNumber) { newValue in
            handleRoomNumberInput(newValue)
            resetKeyboardTimer()
        }
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ü–≤–µ—Ç–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏
    private func buildColorCounters(width: CGFloat) -> some View {
        let colors = getSortedColorCounts()
        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ colors.count –Ω–µ —Ä–∞–≤–µ–Ω –Ω—É–ª—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å.
        let count = CGFloat(max(1, colors.count))
        
        let availableWidthForCounters = width * 0.38
        let calculatedItemWidth = (availableWidthForCounters * 0.95) / count
        let itemFrameWidth = max(18, min(24, calculatedItemWidth))
        let hStackSpacing = max(1.0, min(3.0, width * 0.005))

        return HStack(spacing: hStackSpacing) {
            ForEach(colors) { colorCount in
                Text("\(colorCount.count)")
                    .foregroundColor(colorCount.textColor)
                    .frame(width: itemFrameWidth)
                    .font(.system(size: 15, weight: .medium))
                    .minimumScaleFactor(0.6)
                    .padding(4)
                    .background(colorCount.backgroundColor)
                    .cornerRadius(5)
                    .onTapGesture { 
                        // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —Ü–≤–µ—Ç–Ω–æ–π —Å—á–µ—Ç—á–∏–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
                        // –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —É–∂–µ —Ä–µ–∂–∏–º —Å–ø–∏—Å–∫–∞
                        if isListViewMode {
                            handleColorTap(colorCount.color)
                        } else {
                            handleColorFilterTap(colorCount.color)
                        }
                    }
                    .onLongPressGesture(minimumDuration: AppConfiguration.Audio.menuLongPressMinDuration * 2) { 
                        provideHapticFeedback()
                        resetFilters() 
                    }
                    .gesture(
                        DragGesture(minimumDistance: 10)
                            .onEnded { gesture in
                                handleColorCounterGesture(gesture)
                            }
                    )
            }
        }
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∂–µ—Å—Ç –Ω–∞ —Ü–≤–µ—Ç–Ω–æ–º —Å—á–µ—Ç—á–∏–∫–µ
    private func handleColorCounterGesture(_ gesture: DragGesture.Value) {
        if gesture.translation.width < 0 { // –°–≤–∞–π–ø –≤–ª–µ–≤–æ
            provideHapticFeedback()
            selectedFilter = nil
            previousFilter = nil
            
            // –õ–æ–≥–∏–∫–∞ —Ü–∏–∫–ª–∞ –¥–ª—è combinedFilterCycleState
            if combinedFilterCycleState == 0 { // –ï—Å–ª–∏ –±—ã–ª –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–±—Ä–æ—à–µ–Ω
                combinedFilterCycleState = 1 // –ö—Ä–∞—Å–Ω—ã–µ + –§–∏–æ–ª–µ—Ç–æ–≤—ã–µ
            } else if combinedFilterCycleState == 1 {
                combinedFilterCycleState = 2 // –ö—Ä–∞—Å–Ω—ã–µ + –ñ–µ–ª—Ç—ã–µ
            } else if combinedFilterCycleState == 2 {
                combinedFilterCycleState = 3 // –ö—Ä–∞—Å–Ω—ã–µ + –§–∏–æ–ª–µ—Ç–æ–≤—ã–µ + –ñ–µ–ª—Ç—ã–µ
            } else if combinedFilterCycleState == 3 {
                combinedFilterCycleState = 1 // –í–æ–∑–≤—Ä–∞—Ç –∫ –ö—Ä–∞—Å–Ω—ã–µ + –§–∏–æ–ª–µ—Ç–æ–≤—ã–µ
            }
            
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–∫–ª—é—á–µ–Ω–∏–µ/–∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
            recordFilterChange(
                name: "combinedFilter",
                prevFilter: nil,
                newFilter: nil
            )
        } else if gesture.translation.width > 0 { // –°–≤–∞–π–ø –≤–ø—Ä–∞–≤–æ
            provideHapticFeedback()
            
            // –ü—Ä–∏ —Å–≤–∞–π–ø–µ –≤–ø—Ä–∞–≤–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
            combinedFilterCycleState = 0
            
            // –£–¥–∞–ª—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ–∫—Ä—É–≥–ª–æ–≥–æ –≤–∏–¥–∞ —è—á–µ–µ–∫
            recordFilterChange(
                name: "viewMode",
                prevFilter: nil,
                newFilter: nil
            )
        }
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    private func buildControlButtons(width: CGFloat) -> some View {
        let calculatedButtonSize = width * 0.035
        let buttonFrameSize = max(12, min(16, calculatedButtonSize))
        let calculatedButtonSpacing = width * 0.008
        let hStackSpacing = max(1, min(3, calculatedButtonSpacing))
        
        return HStack(spacing: hStackSpacing) {
            buildHistoryButton(size: buttonFrameSize)
            buildLayoutButton(size: buttonFrameSize)
            buildSettingsButton(size: buttonFrameSize)
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ —Å–ø–∏—Å–∫–∞ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
            Button(action: importRoomsFromClipboard) {
                Image(systemName: "doc.on.clipboard")
                    .resizable()
                    .scaledToFit()
                    .frame(width: buttonFrameSize, height: buttonFrameSize)
                    .foregroundColor(.white)
            }
            // Button for old single-tap color cycle mode
            Button(action: {
                provideHapticFeedback()
                useOldColorTap.toggle()
            }) {
                Image(systemName: useOldColorTap ? "hand.tap.fill" : "hand.tap")
                    .resizable()
                    .scaledToFit()
                    .frame(width: buttonFrameSize, height: buttonFrameSize)
                    .foregroundColor(.white)
            }
        }
        .padding(.horizontal, min(2, max(1, width * 0.005)))
    }
    
    // MARK: - Keyboard Timer Methods
    
    private func startKeyboardTimer() {
        stopKeyboardTimer()
        lastInputTime = Date()
        keyboardTimer = Timer.scheduledTimer(withTimeInterval: 0.5, repeats: true) { _ in checkKeyboardTimeout() }
    }
    
    private func stopKeyboardTimer() {
        keyboardTimer?.invalidate()
        keyboardTimer = nil
    }
    
    private func resetKeyboardTimer() {
        lastInputTime = Date()
        if keyboardTimer == nil { startKeyboardTimer() }
    }
    
    private func checkKeyboardTimeout() {
        let currentTime = Date()
        if currentTime.timeIntervalSince(lastInputTime) >= keyboardTimeout {
            DispatchQueue.main.async {
                hideKeyboard()
                stopKeyboardTimer()
            }
        }
    }
    
    // MARK: - UI Builders
    
    private func buildHistoryButton(size: CGFloat) -> some View {
        Button(action: {
            // –ë–æ–ª—å—à–µ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏
            activeSheet = .actionHistory
            SoundManager.shared.playSound(for: .toggleStatus)
        }) {
            Image(systemName: "clock.arrow.circlepath")
                .font(.system(size: size))
                .foregroundColor(.white)
        }
    }
    
    private func buildLayoutButton(size: CGFloat) -> some View {
        Button(action: {
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            let wasVertical = isVerticalLayout
            isVerticalLayout.toggle()
            
            recordFilterChange(
                name: "layout",
                prevFilter: nil,
                newFilter: wasVertical ? .green : .red
            )
            
            provideHapticFeedback()
        }) {
            Image(systemName: isVerticalLayout ? "rectangle.grid.1x2" : "rectangle.grid.2x2")
                .resizable()
                .scaledToFit()
                .frame(width: size, height: size)
                .foregroundColor(.white)
        }
    }
    
    private func buildSettingsButton(size: CGFloat) -> some View {
        Button(action: { provideHapticFeedback(); activeSheet = .settings }) {
            Image(systemName: "gearshape")
                .resizable()
                .scaledToFit()
                .frame(width: size, height: size)
                .foregroundColor(.white)
        }
    }
    
    // MARK: - Floor Section
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–Ω–∞—Ç –ø–æ —ç—Ç–∞–∂—É –∏ —Ü–≤–µ—Ç—É
    private func filterRoomsByFloorAndColor(floor: Int, selectedFilter: Room.RoomColor?) -> [Room] {
                        let roomsForFloor = viewModel.visibleRooms.filter { room in
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –Ω–∞ –Ω—É–∂–Ω–æ–º —ç—Ç–∞–∂–µ
            let isCorrectFloor = Int(room.number.prefix(1)) == floor
            
            // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–µ–ª—ã–µ –∫–æ–º–Ω–∞—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ —Å–∫—Ä—ã—Ç—ã
            if viewModel.hideWhiteRooms && room.color == .white {
                return false
            }
            
            // –õ–æ–≥–∏–∫–∞ –¥–ª—è combinedFilterCycleState
            if combinedFilterCycleState == 1 { // –ö—Ä–∞—Å–Ω—ã–µ + –§–∏–æ–ª–µ—Ç–æ–≤—ã–µ
                return isCorrectFloor && (room.color == .red || room.color == .purple)
            } else if combinedFilterCycleState == 2 { // –ö—Ä–∞—Å–Ω—ã–µ + –ñ–µ–ª—Ç—ã–µ
                return isCorrectFloor && (room.color == .red || room.color == .none)
            } else if combinedFilterCycleState == 3 { // –ö—Ä–∞—Å–Ω—ã–µ + –§–∏–æ–ª–µ—Ç–æ–≤—ã–µ + –ñ–µ–ª—Ç—ã–µ
                return isCorrectFloor && (room.color == .red || room.color == .purple || room.color == .none)
            }
            // –ö–æ–Ω–µ—Ü –ª–æ–≥–∏–∫–∏ –¥–ª—è combinedFilterCycleState
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –æ–¥–∏–Ω–æ—á–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º (–µ—Å–ª–∏ combinedFilterCycleState == 0)
            if let filter = selectedFilter {
                switch filter {
                case .none: return isCorrectFloor && room.color == .none
                case .purple: return isCorrectFloor && room.color == .purple
                case .red: return isCorrectFloor && room.color == .red
                case .green: return isCorrectFloor && (room.color == .green || room.color == .blue)
                case .blue: return isCorrectFloor && room.color == .blue
                case .white: return isCorrectFloor && room.color == .white
                }
            }
            return isCorrectFloor // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö, –Ω–∏ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–Ω–∞—Ç—ã –ø–æ –Ω–æ–º–µ—Ä—É
        return roomsForFloor.sorted { $0.number < $1.number }
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –¥–æ–ª–∂–Ω–∞ –ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
    private func shouldDisplayRoom(room: Room, selectedFilter: Room.RoomColor?) -> Bool {
        if viewModel.hideWhiteRooms && room.color == .white {
            return false
        }

        // –õ–æ–≥–∏–∫–∞ –¥–ª—è combinedFilterCycleState
        if combinedFilterCycleState == 1 { // –ö—Ä–∞—Å–Ω—ã–µ + –§–∏–æ–ª–µ—Ç–æ–≤—ã–µ
            return room.color == .red || room.color == .purple
        } else if combinedFilterCycleState == 2 { // –ö—Ä–∞—Å–Ω—ã–µ + –ñ–µ–ª—Ç—ã–µ
            return room.color == .red || room.color == .none
        } else if combinedFilterCycleState == 3 { // –ö—Ä–∞—Å–Ω—ã–µ + –§–∏–æ–ª–µ—Ç–æ–≤—ã–µ + –ñ–µ–ª—Ç—ã–µ
            return room.color == .red || room.color == .purple || room.color == .none
        }
        // –ö–æ–Ω–µ—Ü –ª–æ–≥–∏–∫–∏ –¥–ª—è combinedFilterCycleState

        // –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ (–µ—Å–ª–∏ combinedFilterCycleState == 0)
        if let filter = selectedFilter {
            switch filter {
            case .none: return room.color == .none
            case .purple: return room.color == .purple
            case .red: return room.color == .red
            case .green: return room.color == .green || room.color == .blue 
            case .blue: return room.color == .blue 
            case .white: return room.color == .white
            }
        }
        return true // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ (combinedFilterCycleState == 0 –∏ selectedFilter == nil), –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ–º–Ω–∞—Ç—É
    }
    
    // –°–æ–∑–¥–∞–µ—Ç —è—á–µ–π–∫—É –∫–æ–º–Ω–∞—Ç—ã —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
    private func createRoomCell(for room: Room) -> some View {
        RoomCell(
            room: room,
            toggleRoomStatus: {
                toggleRoomStatus(room)
            },
            setTime: {
                setTimeForRoom(room)
            },
            deleteRoom: {
                deleteRoom(room)
            },
            markRoom: {
                markRoom(room)
            },
            getTranslation: viewModel.getTranslation(for:),
            fontColor: .black,
            isLocked: isLocked,
            removeTime: {
                removeTimeFromRoom(room: room)
            },
            viewModel: viewModel
        )
        .crazyEffect(cellID: room.id)
    }
    
    // –°–æ–∑–¥–∞–µ—Ç —Å–µ—Ç–∫—É —è—á–µ–µ–∫ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Å —Ä–∞–≤–Ω–æ–π —Ç–æ–ª—â–∏–Ω–æ–π –ª–∏–Ω–∏–π
    private func createGridCell(number: String, cellWidth: CGFloat, cellHeight: CGFloat) -> some View {
        Text(number)
            .font(.system(size: 20, weight: .bold))
            .foregroundColor(.gray)
            .frame(width: cellWidth, height: cellHeight)
            .background(Color.clear)
    }
    
    // –°–æ–∑–¥–∞–µ—Ç –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é —Ä–∞—Å–∫–ª–∞–¥–∫—É –¥–ª—è —ç—Ç–∞–∂–∞
    private func createVerticalLayout() -> some View {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∏–¥–∏–º—ã–µ –∫–æ–º–Ω–∞—Ç—ã
        let visibleRooms = viewModel.visibleRooms
        let screenWidth = UIScreen.main.bounds.width
        let spacing: CGFloat = 0 // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –∫–æ–ª–æ–Ω–∫–∞–º–∏
        let columnWidth = screenWidth / 5 // 5 –∫–æ–ª–æ–Ω–æ–∫ –±–µ–∑ –æ—Ç—Å—Ç—É–ø–æ–≤
        let cellSize: CGFloat = columnWidth // –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —è—á–µ–π–∫–∏
        
        return ScrollView {
            HStack(alignment: .top, spacing: spacing) {
                // –°–æ–∑–¥–∞–µ–º 5 –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —ç—Ç–∞–∂–µ–π
                ForEach(1...5, id: \.self) { floor in
                    // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–∂–∞ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
                    let floorRooms = visibleRooms.filter { room in
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–º–Ω–∞—Ç–∞ —Ç–µ–∫—É—â–µ–º—É —ç—Ç–∞–∂—É
                        let isOnFloor = Int(room.number.prefix(1)) == floor
                        guard isOnFloor else { return false }
                        
                        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä, –µ—Å–ª–∏ –æ–Ω –≤—ã–±—Ä–∞–Ω
                        if let filter = selectedFilter {
                            switch filter {
                            case .none: return room.color == .none
                            case .purple: return room.color == .purple
                            case .red: return room.color == .red
                            case .green: return (room.color == .green || room.color == .blue)
                            case .blue: return room.color == .blue
                            case .white: return room.color == .white
                            }
                        }
                        
                        // –õ–æ–≥–∏–∫–∞ –¥–ª—è combinedFilterCycleState
                        if combinedFilterCycleState == 1 { // –ö—Ä–∞—Å–Ω—ã–µ + –§–∏–æ–ª–µ—Ç–æ–≤—ã–µ
                            return (room.color == .red || room.color == .purple)
                        } else if combinedFilterCycleState == 2 { // –ö—Ä–∞—Å–Ω—ã–µ + –ñ–µ–ª—Ç—ã–µ
                            return (room.color == .red || room.color == .none)
                        } else if combinedFilterCycleState == 3 { // –ö—Ä–∞—Å–Ω—ã–µ + –§–∏–æ–ª–µ—Ç–æ–≤—ã–µ + –ñ–µ–ª—Ç—ã–µ
                            return (room.color == .red || room.color == .purple || room.color == .none)
                        }
                        
                        // –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–Ω–∞—Ç—É
                        return true
                    }.sorted { $0.number < $1.number }
                    
                    VStack(spacing: 0) { // –£–±–∏—Ä–∞–µ–º spacing –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –≤ –∫–æ–ª–æ–Ω–∫–µ
                        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —ç—Ç–∞–∂–∞
                        AdaptiveFloorLabel(
                            floor: floor,
                            width: columnWidth,
                            height: 30
                        )
                        
                        // –ö–æ–º–Ω–∞—Ç—ã —ç—Ç–∞–∂–∞
                        if !floorRooms.isEmpty {
                            ForEach(floorRooms) { room in
                                createRoomCell(for: room)
                                    .frame(width: cellSize, height: cellSize) // –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —è—á–µ–π–∫–∏
                            }
                        }
                    }
                    .frame(width: columnWidth)
                }
            }
            .padding(.horizontal, 0) // –£–±–∏—Ä–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã
            .padding(.vertical, 5) // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —ç—Ç–∞–∂–∞
    private func floorColor(for floor: Int) -> Color {
        switch floor {
        case 1: return Color.blue
        case 2: return Color.green
        case 3: return Color.orange
        case 4: return Color.purple
        case 5: return Color.red
        default: return Color.gray
        }
    }
    
    // –°–æ–∑–¥–∞–µ—Ç –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é —Ä–∞—Å–∫–ª–∞–¥–∫—É –¥–ª—è –≤—Å–µ—Ö —ç—Ç–∞–∂–µ–π
    private func createHorizontalLayout() -> some View {
        let columns = Array(repeating: GridItem(.flexible(), spacing: 10), count: 4)
        let cellWidth = (UIScreen.main.bounds.width - 50) / 4 // –£—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã
        let cellHeight: CGFloat = 60
        
        return VStack(alignment: .center, spacing: 40) {
            ForEach(1...5, id: \.self) { floor in
                let filteredRooms = filterRoomsByFloorAndColor(
                    floor: floor, 
                    selectedFilter: selectedFilter
                )
                
                if !filteredRooms.isEmpty {
                    LazyVGrid(columns: columns, spacing: 10) {
                        ForEach(filteredRooms) { room in
                            createRoomCell(for: room)
                                .frame(width: cellWidth, height: cellHeight)
                        }
                    }
                    .centeredWithPadding()
                }
            }
        }
    }
    
    private func buildFloorsSection() -> some View {
        Group {
            VStack(spacing: 15) {
                // –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞–¥ —Å–ø–∏—Å–∫–æ–º –∫–æ–º–Ω–∞—Ç
                StatisticsCompactView(viewModel: viewModel)
                    .centeredWithPadding()
                    .animation(.none, value: viewModel.rooms)
                    .frame(height: 230)
                    .layoutPriority(1)
                
                Spacer(minLength: 30)
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ä–∞—Å–∫–ª–∞–¥–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
                if isListViewMode {
                    createColorFilteredListView()
                } else if isVerticalLayout {
                    createVerticalLayout()
                } else {
                    createHorizontalLayout()
                }
            }
        }
        .animation(.none, value: viewModel.rooms)
    }
    
    // –°–æ–∑–¥–∞–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–º–Ω–∞—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ —Ü–≤–µ—Ç—É
    private func createColorFilteredListView() -> some View {
        let filteredRooms = viewModel.visibleRooms.filter { room in
            if let color = selectedListColor {
                if color == .green {
                    // –î–ª—è –∑–µ–ª–µ–Ω–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏ –∑–µ–ª–µ–Ω—ã–µ, –∏ —Å–∏–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
                    return room.color == .green || room.color == .blue
                } else {
                    return room.color == color
                }
            }
            return false
        }.sorted { $0.number < $1.number }
        
        return ScrollView {
            VStack(spacing: 8) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
                Text(getColorNameForList(selectedListColor))
                    .font(.headline)
                    .foregroundColor(.white)
                    .padding(.bottom, 8)
                
                if filteredRooms.isEmpty {
                    Text(viewModel.getTranslation(for: "noRoomsWithColor"))
                        .foregroundColor(.gray)
                        .padding()
                } else {
                    ForEach(filteredRooms) { room in
                        colorFilteredRoomRow(room: room)
                    }
                }
            }
            .padding()
        }
        .background(Color.black.opacity(0.6))
        .cornerRadius(8)
        .centeredWithPadding()
    }
    
    // –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞
    private func getColorNameForList(_ color: Room.RoomColor?) -> String {
        guard let color = color else { return "" }
        
        switch color {
        case .none:
            return viewModel.getTranslation(for: "colorYellow")
        case .red:
            return viewModel.getTranslation(for: "colorRed")
        case .green:
            return viewModel.getTranslation(for: "colorGreen") + " & " + viewModel.getTranslation(for: "colorBlue")
        case .blue:
            return viewModel.getTranslation(for: "colorBlue")
        case .purple:
            return viewModel.getTranslation(for: "colorPurple")
        case .white:
            return viewModel.getTranslation(for: "colorWhite")
        }
    }
    
    // –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ–¥–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã –≤ —Ä–µ–∂–∏–º–µ —Å–ø–∏—Å–∫–∞ —Å —Ü–≤–µ—Ç–æ–≤–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
    private func colorFilteredRoomRow(room: Room) -> some View {
        HStack {
            Text(room.number)
                .font(.title3)
                .bold()
                .frame(width: 70, alignment: .leading)
            
            Spacer()
            
            if let timestamp = getRelevantTimestamp(for: room) {
                Text(formatTimestamp(timestamp))
                    .font(.system(size: 16))
            } else {
                Text("--:--")
                    .font(.system(size: 16))
                    .foregroundColor(.gray)
            }
            
            Spacer()
            
            Button(action: {
                if let index = viewModel.rooms.firstIndex(where: { $0.id == room.id }) {
                    selectedRoom = viewModel.rooms[index]
                    toggleRoomStatus(viewModel.rooms[index])
                }
            }) {
                Circle()
                    .fill(getColorForRoom(room))
                    .frame(width: 24, height: 24)
            }
        }
        .padding(.vertical, 8)
        .padding(.horizontal, 16)
        .background(Color.gray.opacity(0.2))
        .cornerRadius(8)
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–µ —Ü–≤–µ—Ç–∞
    private func getRelevantTimestamp(for room: Room) -> Date? {
        switch room.color {
        case .none:
            return room.noneTimestamp
        case .red:
            return room.redTimestamp
        case .green:
            return room.greenTimestamp
        case .blue:
            return room.blueTimestamp
        case .purple:
            if let timeString = room.availableTime {
                let formatter = DateFormatter()
                formatter.timeStyle = .short
                return formatter.date(from: timeString)
            }
            return nil
        case .white:
            return room.whiteTimestamp
        }
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
    private func formatTimestamp(_ date: Date) -> String {
        let formatter = DateFormatter()
        formatter.timeStyle = .short
        return formatter.string(from: date)
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ
    private func getColorForRoom(_ room: Room) -> Color {
        switch room.color {
        case .none:
            return Color(red: 1.0, green: 0.85, blue: 0.0) // –Ø—Ä–∫–∏–π –∂–µ–ª—Ç—ã–π
        case .red:
            return Color(red: 1.0, green: 0.15, blue: 0.15) // –Ø—Ä–∫–∏–π –∫—Ä–∞—Å–Ω—ã–π
        case .green:
            return Color(red: 0.0, green: 0.95, blue: 0.2) // –°–æ—á–Ω—ã–π –∑–µ–ª–µ–Ω—ã–π
        case .blue:
            return Color(red: 0.0, green: 0.45, blue: 1.0) // –ù–∞—Å—ã—â–µ–Ω–Ω—ã–π —Å–∏–Ω–∏–π
        case .purple:
            return Color(red: 0.85, green: 0.2, blue: 1.0) // –Ø—Ä–∫–∏–π —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
        case .white:
            return Color.white
        }
    }
    
    // MARK: - Actions
    
    private func handleRoomNumberInput(_ text: String) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π —Å Enter (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
        if text.hasSuffix("\n") {
            processRoomNumber(text.trimmingCharacters(in: .whitespacesAndNewlines))
            return
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
        let numbersOnly = text.filter { $0.isNumber }
        
        // –ï—Å–ª–∏ –≤–≤–µ–ª–∏ 3 —Ü–∏—Ñ—Ä—ã - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É
        if numbersOnly.count == 3 {
            processRoomNumber(numbersOnly)
        }
    }
    
    private func processRoomNumber(_ roomNumber: String) {
        if !roomNumber.isEmpty {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
            let roomsBeforeAdd = viewModel.rooms
            
            if let error = viewModel.addRoom(number: roomNumber) {
                toastMessage = error
                showToast = true
            } else {
                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã –≤ –∏—Å—Ç–æ—Ä–∏—é
                ActionHistoryManager.shared.recordAddRoom(
                    roomNumber: roomNumber,
                    rooms: roomsBeforeAdd // –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –î–û –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                )
                
                print("DEBUG: –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã \(roomNumber) –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–µ–π—Å—Ç–≤–∏–π")
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏
                updateStats()
            }
        }
        
        enteredRoomNumber = ""
        hideKeyboard()
    }
    
    private func setRoomTime() {
        if let index = viewModel.rooms.firstIndex(where: { $0.id == selectedRoom?.id }) {
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            let formatter = DateFormatter()
            formatter.timeStyle = .short
            let formattedTime = formatter.string(from: selectedTime)
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π
            let prevRooms = viewModel.rooms
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –≤ –∫–æ–º–Ω–∞—Ç–µ
            viewModel.rooms[index].availableTime = formattedTime
            
            // –ï—Å–ª–∏ —Ü–≤–µ—Ç –∫–æ–º–Ω–∞—Ç—ã –Ω–µ —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π, –º–µ–Ω—è–µ–º –µ–≥–æ
            if viewModel.rooms[index].color != .purple {
                viewModel.rooms[index].color = .purple
            }
            
            // –ó–ê–ü–ò–°–´–í–ê–ï–ú –¢–û–õ–¨–ö–û –û–î–ù–û –î–ï–ô–°–¢–í–ò–ï - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
            // –î–µ–π—Å—Ç–≤–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –Ω–∞ —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
            ActionHistoryManager.shared.recordAddTime(
                roomNumber: viewModel.rooms[index].number,
                time: selectedTime,
                rooms: prevRooms
            )
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏
            updateStats()
        }
        activeSheet = nil
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏
    private func updateStats() {
        // –û—Ç–∫–ª—é—á–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–µ—Ä–≥–∞–Ω–∏—è —ç–∫—Ä–∞–Ω–∞
        withAnimation(.none) {
            viewModel.saveRooms()
        }
    }
    
    private func toggleRoomStatus(_ room: Room) {
        provideHapticFeedback()
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π
        if isLocked || room.isCompletedBefore930 {
            return
        }
        // –°—Ç–∞—Ä—ã–π —Ä–µ–∂–∏–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π —Å–º–µ–Ω—ã —Ü–≤–µ—Ç–æ–≤: –∂—ë–ª—Ç—ã–π, –∫—Ä–∞—Å–Ω—ã–π, –∑–µ–ª—ë–Ω—ã–π, —Å–∏–Ω–∏–π
        if useOldColorTap {
            guard let index = viewModel.rooms.firstIndex(where: { $0.id == room.id }) else { return }
            let currentColor = viewModel.rooms[index].color
            let now = Date()
            let cycle: [Room.RoomColor] = [.none, .red, .green, .blue]
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ü–≤–µ—Ç –≤ —Ü–∏–∫–ª–µ
            guard let idx = cycle.firstIndex(of: currentColor) else { return }
            let nextColor = cycle[(idx + 1) % cycle.count]
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫–∏/–≤—Ä–µ–º–µ–Ω–∞
            viewModel.rooms[index].color = nextColor
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º timestamp –¥–ª—è red/green
            switch nextColor {
            case .none:
                viewModel.rooms[index].noneTimestamp = now
            case .red:
                viewModel.rooms[index].redTimestamp = now
                if !disableClipboard && enableRedClipboard {
                    let formatted = formatTimeInAmericanStyle(now)
                    var text = String(format: redMessageTemplate, viewModel.rooms[index].number, formatted)
                    if includeSpanish { text += " / " + String(format: redMessageTemplateES, viewModel.rooms[index].number, formatted) }
                    UIPasteboard.general.string = text
                }
            case .green:
                viewModel.rooms[index].greenTimestamp = now
                if !disableClipboard && enableGreenClipboard {
                    let formatted = formatTimeInAmericanStyle(now)
                    var text = String(format: greenMessageTemplate, viewModel.rooms[index].number, formatted)
                    if includeSpanish { text += " / " + String(format: greenMessageTemplateES, viewModel.rooms[index].number, formatted) }
                    UIPasteboard.general.string = text
                }
            case .blue:
                viewModel.rooms[index].blueTimestamp = now
                // –ü—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —Å–∏–Ω–∏–π –æ—á–∏—â–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                viewModel.rooms[index].availableTime = nil
                // –ù–µ –æ—á–∏—â–∞–µ–º timestamp'—ã –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —Å–∏–Ω–∏–π
            default:
                break
            }
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
            ActionHistoryManager.shared.recordColorChange(
                roomNumber: viewModel.rooms[index].number,
                prevColor: currentColor,
                newColor: nextColor,
                rooms: viewModel.rooms
            )
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            updateStats()
            // –ó–≤—É–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
            SoundManager.shared.playSound(for: .toggleStatus)
            return
        }
        // –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–º–µ–Ω—ã —Ü–≤–µ—Ç–∞ (—Å —É—á—ë—Ç–æ–º —Ñ–∏–æ–ª–µ—Ç–æ–≤–æ–≥–æ)
        if let index = viewModel.rooms.firstIndex(where: { $0.id == room.id }) {
            let currentColor = viewModel.rooms[index].color
            let now = Date()
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ü–≤–µ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
            let prevColor = viewModel.rooms[index].color
            var newColor: Room.RoomColor = .none
            
            if currentColor == .none || (useOldColorTap ? currentColor == .blue : currentColor == .purple) {
                newColor = .red
                viewModel.rooms[index].color = newColor
                viewModel.rooms[index].redTimestamp = now
                
                // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (AM/PM)
                let formattedTime = formatTimeInAmericanStyle(now)
                
                if !disableClipboard && enableRedClipboard {
                    // –ö–æ–ø–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ –≤—Ä–µ–º–µ–Ω–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
                    let roomNumber = viewModel.rooms[index].number
                    var clipboardText = String(format: redMessageTemplate, roomNumber, formattedTime)
                    
                    // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –∏—Å–ø–∞–Ω—Å–∫–∏–π —è–∑—ã–∫, –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
                    if includeSpanish {
                        clipboardText += " / " + String(format: redMessageTemplateES, roomNumber, formattedTime)
                    }
                    
                    UIPasteboard.general.string = clipboardText
                }
            } else if currentColor == .red {
                newColor = .green
                viewModel.rooms[index].color = newColor
                viewModel.rooms[index].greenTimestamp = now
                
                if !disableClipboard && enableGreenClipboard {
                    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (AM/PM)
                    let formattedTime = formatTimeInAmericanStyle(now)
                    
                    // –ö–æ–ø–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ –≤—Ä–µ–º–µ–Ω–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
                    let roomNumber = viewModel.rooms[index].number
                    var clipboardText = String(format: greenMessageTemplate, roomNumber, formattedTime)
                    
                    // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –∏—Å–ø–∞–Ω—Å–∫–∏–π —è–∑—ã–∫, –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
                    if includeSpanish {
                        clipboardText += " / " + String(format: greenMessageTemplateES, roomNumber, formattedTime)
                    }
                    
                    UIPasteboard.general.string = clipboardText
                }
            } else if currentColor == .green {
                newColor = .blue
                viewModel.rooms[index].color = newColor
                viewModel.rooms[index].blueTimestamp = now
            } else if currentColor == .blue {
                newColor = .none
                viewModel.rooms[index].color = newColor
                viewModel.rooms[index].noneTimestamp = now
                viewModel.rooms[index].availableTime = nil
                // –ù–µ –æ—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ timestamp'—ã –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –∂–µ–ª—Ç—ã–π
            }
            
            // –ï—Å–ª–∏ –Ω–æ–≤—ã–π —Ü–≤–µ—Ç –±–µ–ª—ã–π, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –º–µ—Ç–∫—É
            if newColor == .white {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ—Ç–∫–∏ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
                if viewModel.rooms[index].isMarked {
                    let beforeMarkState = viewModel.rooms
                    viewModel.rooms[index].isMarked = false
                    let afterMarkState = viewModel.rooms
                    ActionHistoryManager.shared.recordUnmark(
                        roomNumber: viewModel.rooms[index].number,
                        beforeState: beforeMarkState,
                        afterState: afterMarkState
                    )
                } else {
                    viewModel.rooms[index].isMarked = false
                }
            }
            
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            recordFilterChange(
                name: viewModel.rooms[index].number,
                prevFilter: prevColor,
                newFilter: newColor
            )
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏
            updateStats()
            
            // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–æ–≤–æ–≥–æ —Ü–≤–µ—Ç–∞
            let soundType: SoundManager.SoundType = newColor == .red ? .toggleStatus :
                                                 newColor == .green ? .toggleStatus :
                                                 newColor == .blue ? .toggleStatus :
                                                 .toggleStatus
            SoundManager.shared.playSound(for: soundType)
        }
    }
    
    private func deleteRoom(_ room: Room) {
        if let index = viewModel.rooms.firstIndex(where: { $0.id == room.id }) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
            let roomNumber = viewModel.rooms[index].number
            let prevColor = viewModel.rooms[index].color
            let prevRooms = viewModel.rooms
            let roomId = viewModel.rooms[index].id.uuidString
            
            // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–ù–ê–ß–ê–õ–ê —É–¥–∞–ª—è–µ–º –∏–∑ Firebase
            Task {
                do {
                    try await FirebaseManager.shared.deleteRoom(roomId)
                    print("‚úÖ –ö–æ–º–Ω–∞—Ç–∞ \(roomNumber) —É–¥–∞–ª–µ–Ω–∞ –∏–∑ Firebase")
                    
                    // –ó–ê–¢–ï–ú —É–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –ë–ï–ó –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò (–≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ)
                    await MainActor.run {
                        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
                        ActionHistoryManager.shared.recordDeleteRoom(
                            roomNumber: roomNumber,
                            prevColor: prevColor,
                            rooms: prevRooms
                        )
                        
                        // –£–¥–∞–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É –ª–æ–∫–∞–ª—å–Ω–æ
                        if let currentIndex = viewModel.rooms.firstIndex(where: { $0.id == room.id }) {
                            viewModel.rooms.remove(at: currentIndex)
                        }
                        
                        // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ, –ë–ï–ó Firebase —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                        viewModel.saveRoomsLocally() // –í–º–µ—Å—Ç–æ updateStats() –∏–ª–∏ saveRooms()
                    }
                } catch {
                    print("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã \(roomNumber) –∏–∑ Firebase: \(error)")
                }
            }
        }
    }
    
    private func markRoom(_ room: Room) {
        // –ù–µ –ø–æ–∑–≤–æ–ª—è–µ–º –æ—Ç–º–µ—á–∞—Ç—å –±–µ–ª—ã–µ –∫–æ–º–Ω–∞—Ç—ã
        if room.color == .white {
            return
        }
        
        if let index = viewModel.rooms.firstIndex(where: { $0.id == room.id }) {
            let beforeState = viewModel.rooms // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –î–û –∏–∑–º–µ–Ω–µ–Ω–∏—è
            
            viewModel.rooms[index].isMarked.toggle()
            let isNowMarked = viewModel.rooms[index].isMarked
            let afterState = viewModel.rooms // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ü–û–°–õ–ï –∏–∑–º–µ–Ω–µ–Ω–∏—è
            
            if isNowMarked {
                ActionHistoryManager.shared.recordMark(
                    roomNumber: viewModel.rooms[index].number,
                    beforeState: beforeState,
                    afterState: afterState
                )
                // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ–º–µ—Ç–∫–∏
                if room.color != .white {
                    PhysicsManager.shared.startChaos()
                    // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è 120fps –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    DispatchQueue.main.asyncAfter(deadline: .now() + AppConfiguration.Performance.markEffectDuration) {
                        PhysicsManager.shared.stopChaos()
                    }
                }
            } else {
                ActionHistoryManager.shared.recordUnmark(
                    roomNumber: viewModel.rooms[index].number,
                    beforeState: beforeState,
                    afterState: afterState
                )
                // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π –∑–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ –¥–ª—è —Å–Ω—è—Ç–∏—è –º–µ—Ç–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            }
            
            updateStats()
        }
    }
    
    private func setTimeForRoom(_ room: Room) {
        selectedRoom = room
        activeSheet = .timePicker
    }
    
    // MARK: - –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    
    private func formatTimeInAmericanStyle(_ date: Date) -> String {
        let timeFormatter = DateFormatter()
        timeFormatter.dateFormat = "hh:mm a" // –§–æ—Ä–º–∞—Ç —á–∞—Å—ã:–º–∏–Ω—É—Ç—ã AM/PM
        timeFormatter.locale = Locale(identifier: "en_US")
        return timeFormatter.string(from: date)
    }
    
    // –§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è - –£–ü–†–û–©–ï–ù–ù–ê–Ø –ò –ß–ï–¢–ö–ê–Ø!
    private func undoLastAction() {
        guard let lastAction = actionHistoryManager.getLastAction() else { 
            print("‚ùå –ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã!")
            return 
        }
        
        // –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ü–†–û–°–¢–û: –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if let previousState = actionHistoryManager.getPreviousRoomsState() {
            viewModel.rooms = previousState
            viewModel.saveRooms()
            
            // –£–¥–∞–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
            actionHistoryManager.removeLastAction()
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –æ—Ç–º–µ–Ω–µ
            toastMessage = "‚è™ –û—Ç–º–µ–Ω–µ–Ω–æ: \(lastAction.description)"
            showToast = true
            
            print("‚úÖ –û–¢–ú–ï–ù–ê –í–´–ü–û–õ–ù–ï–ù–ê: \(lastAction.description)")
        } else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã")
        }
    }
    
    private func handleScrollChange(value: CGFloat) {
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∫—Ä–æ–ª–ª–∞ –¥–ª—è iOS 16
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–æ–≥–¥–∞ –±–∞–Ω–Ω–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–æ–ø—Ä–∏–∫–∞—Å–∞—Ç—å—Å—è —Å –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª—å—é
        if value < -60 {
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞–∑–º—ã—Ç–∏–µ, –∫–æ–≥–¥–∞ —Å–∫—Ä–æ–ª–ª–∏–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–≤–µ—Ä—Ö
            NavigationBarManager.shared.applyBlurredAppearance()
        } else {
            // –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ–Ω—é –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö
            NavigationBarManager.shared.applyTransparentAppearance()
        }
    }
    
    // MARK: - –î–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏

    private struct ColorCount: Identifiable {
        let id = UUID()
        let color: Room.RoomColor
        let count: Int
        let backgroundColor: Color
        let textColor: Color
    }
    
    private func getSortedColorCounts() -> [ColorCount] {
        let counts = [
            ColorCount(
                color: .none,
                count: viewModel.visibleRooms.filter { $0.color == .none }.count,
                backgroundColor: Color(red: 1.0, green: 0.85, blue: 0.0), // –Ø—Ä–∫–∏–π –∂–µ–ª—Ç—ã–π
                textColor: .black
            ),
            ColorCount(
                color: .red,
                count: viewModel.visibleRooms.filter { $0.color == .red }.count,
                backgroundColor: Color(red: 1.0, green: 0.15, blue: 0.15), // –Ø—Ä–∫–∏–π –∫—Ä–∞—Å–Ω—ã–π
                textColor: .white
            ),
            ColorCount(
                color: .green,
                count: viewModel.visibleRooms.filter { $0.color == .green || $0.color == .blue }.count,
                backgroundColor: Color(red: 0.0, green: 0.95, blue: 0.2), // –°–æ—á–Ω—ã–π –∑–µ–ª–µ–Ω—ã–π
                textColor: .black
            ),
            ColorCount(
                color: .purple,
                count: viewModel.visibleRooms.filter { $0.color == .purple }.count,
                backgroundColor: Color(red: 0.85, green: 0.2, blue: 1.0), // –Ø—Ä–∫–∏–π —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
                textColor: .white
            )
        ]
        
        return counts.sorted { $0.count < $1.count }
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    private func recordFilterChange(name: String, prevFilter: Room.RoomColor?, newFilter: Room.RoomColor?) {
        var description = ""
        
        if name == "layout" {
            description = isVerticalLayout ? "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π layout" : "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π layout"
        } else if let prevColor = prevFilter, let newColor = newFilter {
            let prevName = colorName(prevColor)
            let newName = colorName(newColor)
            description = "–§–∏–ª—å—Ç—Ä: \(prevName) ‚Üí \(newName)"
        } else if let prevColor = prevFilter {
            let prevName = colorName(prevColor)
            description = "–°–±—Ä–æ—à–µ–Ω —Ñ–∏–ª—å—Ç—Ä: \(prevName)"
        } else if let newColor = newFilter {
            let newName = colorName(newColor)
            description = "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä: \(newName)"
        } else {
            if name == "viewMode" {
                description = isRoundedView ? "–í–∫–ª—é—á–µ–Ω –æ–∫—Ä—É–≥–ª—ã–π –≤–∏–¥" : "–í—ã–∫–ª—é—á–µ–Ω –æ–∫—Ä—É–≥–ª—ã–π –≤–∏–¥"
            } else {
                description = "–ò–∑–º–µ–Ω–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
            }
        }
        
        ActionHistoryManager.shared.recordFilterChange(
            name: name,
            description: description,
            rooms: viewModel.rooms
        )
    }
    
    private func colorName(_ color: Room.RoomColor) -> String {
        switch color {
        case .none: return "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
        case .red: return "–ö—Ä–∞—Å–Ω—ã–π"
        case .green: return "–ó–µ–ª–µ–Ω—ã–π"
        case .blue: return "–°–∏–Ω–∏–π"
        case .purple: return "–§–∏–æ–ª–µ—Ç–æ–≤—ã–π"
        case .white: return "–ë–µ–ª—ã–π"
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    private func removeTimeFromRoom(room: Room) {
        if let index = viewModel.rooms.firstIndex(where: { $0.id == room.id }) {
            if let timeToRemove = viewModel.rooms[index].availableTime {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π
                let prevRooms = viewModel.rooms
                let prevColor = viewModel.rooms[index].color
                
                // –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
                let formatter = DateFormatter()
                formatter.timeStyle = .short
                let prevTime = formatter.date(from: timeToRemove) ?? Date()
                
                // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º—è –∏ –º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –Ω–∞ "none"
                viewModel.rooms[index].availableTime = nil
                viewModel.rooms[index].color = .none
                
                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
                ActionHistoryManager.shared.recordRemoveTime(
                    roomNumber: viewModel.rooms[index].number,
                    prevTime: prevTime,
                    rooms: prevRooms
                )
                
                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
                ActionHistoryManager.shared.recordColorChange(
                    roomNumber: viewModel.rooms[index].number,
                    prevColor: prevColor,
                    newColor: .none,
                    rooms: prevRooms
                )
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏
                updateStats()
            }
        }
    }
    
    // –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ Date (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤)
    private func parseTimeString(_ s: String) -> Date? {
        let formats = ["HH:mm:ss", "H:mm:ss", "HH:mm", "H:mm", "h:mm a"]
        for format in formats {
            let df = DateFormatter()
            df.dateFormat = format
            if let d = df.date(from: s) {
                return d
            }
        }
        return nil
    }
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
    private func importRoomsFromClipboard() {
        guard let clipboard = UIPasteboard.general.string else { return }
        let lines = clipboard.split(whereSeparator: \.isNewline) 
        let outputFormatter = DateFormatter()
        outputFormatter.timeStyle = .short
        var importedCount = 0
        
        let initialRoomsSnapshot = viewModel.rooms 
        var roomsToAdd: [Room] = []
        var roomsToUpdateDetails: [(originalRoom: Room, timeToSet: Date?, newColorCandidate: Room.RoomColor?)] = []

        for rawLine in lines {
            let line = rawLine.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines) 
            guard !line.isEmpty else { continue }
            let tokens = line.split(whereSeparator: { $0.isWhitespace || $0 == "\t" }).map { String($0) }
            guard let numberToken = tokens.first(where: { $0.range(of: "^[1-5]\\d{2}$", options: String.CompareOptions.regularExpression) != nil }) else { continue } 
            let number = numberToken
            let timeToken = tokens.first(where: { $0.contains(":") })
            let timeDate = timeToken.flatMap { parseTimeString($0) }

            if let existingRoom = initialRoomsSnapshot.first(where: { $0.number == number }) {
                if timeDate != nil {
                    roomsToUpdateDetails.append((originalRoom: existingRoom, timeToSet: timeDate, newColorCandidate: .purple))
                }
            } else {
                var newRoom = Room(number: number)
                if let time = timeDate {
                    newRoom.availableTime = outputFormatter.string(from: time)
                    newRoom.color = .purple
                }
                roomsToAdd.append(newRoom)
            }
        }

        var workingRoomsCopy = viewModel.rooms

        for details in roomsToUpdateDetails {
            if let indexInWorkingCopy = workingRoomsCopy.firstIndex(where: { $0.id == details.originalRoom.id }) {
                var changed = false
                if let timeToSet = details.timeToSet {
                    let newTimeStr = outputFormatter.string(from: timeToSet)
                    if workingRoomsCopy[indexInWorkingCopy].availableTime != newTimeStr {
                        workingRoomsCopy[indexInWorkingCopy].availableTime = newTimeStr
                        changed = true
                        ActionHistoryManager.shared.recordAddTime(
                            roomNumber: details.originalRoom.number,
                            time: timeToSet,
                            rooms: initialRoomsSnapshot)
                    }
                }
                if let newColor = details.newColorCandidate, workingRoomsCopy[indexInWorkingCopy].color != newColor {
                    let oldColor = workingRoomsCopy[indexInWorkingCopy].color
                    workingRoomsCopy[indexInWorkingCopy].color = newColor
                    changed = true
                    ActionHistoryManager.shared.recordColorChange(
                        roomNumber: details.originalRoom.number,
                        prevColor: oldColor,
                        newColor: newColor,
                        rooms: initialRoomsSnapshot)
                }
                if changed {
                    importedCount += 1
                }
            }
        }

        if !roomsToAdd.isEmpty {
            for newRoom in roomsToAdd {
                if !workingRoomsCopy.contains(where: { $0.number == newRoom.number }) {
                    workingRoomsCopy.append(newRoom)
                    ActionHistoryManager.shared.recordAddRoom(
                        roomNumber: newRoom.number,
                        rooms: initialRoomsSnapshot) 

                    if newRoom.color == .purple, let timeString = newRoom.availableTime, let timeDate = parseTimeString(timeString) {
                         ActionHistoryManager.shared.recordAddTime(
                            roomNumber: newRoom.number,
                            time: timeDate,
                            rooms: initialRoomsSnapshot)
                    }
                    importedCount += 1
                }
            }
        }
        
        viewModel.rooms = workingRoomsCopy
        
        var floorsToActivate = Set<Int>()
        for roomNumber in roomsToAdd.map({ $0.number }) + roomsToUpdateDetails.map({ $0.originalRoom.number }) {
            if let floor = AppConfiguration.Rooms.extractFloor(from: roomNumber) {
                if !floorManager.isFloorActive(floor) {
                    floorsToActivate.insert(floor)
                }
            }
        }
        
        if !floorsToActivate.isEmpty {
            let beforeFloorChangeSnapshot = viewModel.rooms 
            for floor in floorsToActivate {
                floorManager.enableFloor(floor)
            }
            SimpleHistoryManager.shared.recordSystemChange(
                "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã —ç—Ç–∞–∂–∏: \(floorsToActivate.sorted().map { String($0) }.joined(separator: ", ")) –∏–∑-–∑–∞ –∏–º–ø–æ—Ä—Ç–∞",
                before: beforeFloorChangeSnapshot, 
                after: viewModel.rooms 
            )
        }

        viewModel.saveRooms()
        
        toastMessage = "–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ \(importedCount) –∫–æ–º–Ω–∞—Ç"
        showToast = true
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    private func saveBackgroundImage() {
        if let backgroundImage = backgroundImage,
           let imageData = backgroundImage.jpegData(compressionQuality: 0.8) {
            UserDefaults.standard.set(imageData, forKey: "backgroundImageData")
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    private func loadBackgroundImage() {
        if let imageData = UserDefaults.standard.data(forKey: "backgroundImageData") {
            backgroundImage = UIImage(data: imageData)
        }
    }
    
    // MARK: - –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ
    
    private func saveBackgroundVideoURL(_ url: URL) {
        UserDefaults.standard.set(url.path, forKey: "backgroundVideoPath")
    }
    
    private func loadBackgroundVideo() {
        if let path = UserDefaults.standard.string(forKey: "backgroundVideoPath") {
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –ø–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É –ø—É—Ç–∏
            if FileManager.default.fileExists(atPath: path) {
                let url = URL(fileURLWithPath: path) // –¢–µ–ø–µ—Ä—å 'url' —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
                backgroundVideoURL = url
                setupVideoPlayer(url: url)
                return // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            }
        }
        // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ (–∏–ª–∏ —Ñ–∞–π–ª –ø–æ –ø—É—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω), –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ
        if let bundledURL = bundledVideoURL {
            backgroundVideoURL = bundledURL
            setupVideoPlayer(url: bundledURL)
        }
    }
    
    private func setupVideoPlayer(url: URL) {
        let queuePlayer = AVQueuePlayer()
        let item = AVPlayerItem(url: url)
        let looper = AVPlayerLooper(player: queuePlayer, templateItem: item)
        queuePlayer.isMuted = true
        queuePlayer.play()
        loopingPlayer = queuePlayer
        playerLooper = looper
        // –ù–∞–±–ª—é–¥–∞—Ç–µ–ª–∏ –∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        NotificationCenter.default.addObserver(forName: UIApplication.willEnterForegroundNotification, object: nil, queue: .main) { _ in
            self.loopingPlayer?.play()
        }
        NotificationCenter.default.addObserver(forName: UIApplication.didEnterBackgroundNotification, object: nil, queue: .main) { _ in
            self.loopingPlayer?.pause()
        }
    }
    
    // –£–¥–∞–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ-—Ñ–æ–Ω–∞
    private func clearBackgroundVideo() {
        loopingPlayer?.pause()
        loopingPlayer = nil
        playerLooper = nil
        backgroundVideoURL = nil
        selectedVideoItem = nil // –°–±—Ä–∞—Å—ã–≤–∞–µ–º PhotosPickerItem –¥–ª—è –≤–∏–¥–µ–æ
        UserDefaults.standard.removeObject(forKey: "backgroundVideoPath")
        // backgroundImage = nil // –£–î–ê–õ–ï–ù–û: –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –≤–ª–∏—è—Ç—å –Ω–∞ —Ñ–æ—Ç–æ-—Ñ–æ–Ω

        // –ï—Å–ª–∏ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–∏–¥–µ–æ, –º—ã —Ö–æ—Ç–∏–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–º—É –≤–∏–¥–µ–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:
        // loadBundledVideoAsBackground() // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Ç–∞–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    }
    
    // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ –∫–∞–∫ —Ñ–æ–Ω–∞
    private func setBundledVideoAsBackground() {
        guard let url = bundledVideoURL else { return }
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ç–æ-—Ñ–æ–Ω
        self.backgroundImage = nil
        self.selectedImageItem = nil
        UserDefaults.standard.removeObject(forKey: "backgroundImageData")

        // –û—á–∏—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –≤–∏–¥–µ–æ-—Ñ–æ–Ω (–µ—Å–ª–∏ –±—ã–ª–æ)
        UserDefaults.standard.removeObject(forKey: "backgroundVideoPath")
        self.selectedVideoItem = nil

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ
        self.backgroundVideoURL = url
        setupVideoPlayer(url: url)
        // –ù–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã–∑—ã–≤–∞—Ç—å saveBackgroundVideoURL –¥–ª—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ,
        // —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ –∏–∑ –±–∞–Ω–¥–ª–∞.
    }
    
    // MARK: - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π FloatingMenu
    private func handleFloatingMenuAction(_ action: FloatingMenuAction) {
        switch action {
        case .changeColor(let newColor):
            changeRoomColorFromMenu(newColor)
        case .toggleMark:
            toggleMarkFromMenu()
        case .toggleDeepClean:
            toggleDeepCleanFromMenu()
        case .setTime:
            setTimeFromMenu()
        case .delete:
            deleteRoomFromMenu()
        case .toggleBefore930:
            toggleBefore930FromMenu()
        }
    }
    
    private func changeRoomColorFromMenu(_ roomColor: Room.RoomColor) {
        guard let activeRoom = FloatingMenuManager.shared.activeRoom,
              let index = viewModel.rooms.firstIndex(where: { $0.id == activeRoom.id }) else { return }
        
        provideHapticFeedback()
        FloatingMenuManager.shared.hideMenu()
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ü–≤–µ—Ç –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∏ –∏–∑–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∫–æ–º–Ω–∞—Ç—ã
        let prevColor = viewModel.rooms[index].color
        viewModel.rooms[index].color = roomColor
        
        // –ï—Å–ª–∏ –Ω–æ–≤—ã–π —Ü–≤–µ—Ç –Ω–µ —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è
        if roomColor != .purple {
            viewModel.rooms[index].availableTime = nil
        }
        
        // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥ –∏–∑/–≤ —Å–∏–Ω–∏–π/–∑–µ–ª–µ–Ω—ã–π/–∂–µ–ª—Ç—ã–π, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–π–º—Å—Ç–µ–º–ø—ã
        if roomColor == .none {
            viewModel.rooms[index].noneTimestamp = Date()
        }
        if roomColor == .green {
            viewModel.rooms[index].greenTimestamp = Date()
            if !disableClipboard && enableGreenClipboard {
                setClipboardMessage(for: viewModel.rooms[index], color: .green)
            }
        }
        if roomColor == .blue {
            viewModel.rooms[index].blueTimestamp = Date()
        }
        if roomColor == .red {
            viewModel.rooms[index].redTimestamp = Date()
            if !disableClipboard && enableRedClipboard {
                setClipboardMessage(for: viewModel.rooms[index], color: .red)
            }
        }
        if roomColor == .white {
            viewModel.rooms[index].whiteTimestamp = Date()
        }
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
        ActionHistoryManager.shared.recordColorChange(
            roomNumber: viewModel.rooms[index].number,
            prevColor: prevColor,
            newColor: roomColor,
            rooms: viewModel.rooms
        )
        
        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–æ–≤–æ–≥–æ —Ü–≤–µ—Ç–∞
        let soundType: SoundManager.SoundType = roomColor == .red ? .toggleStatus :
                                             roomColor == .green ? .toggleStatus :
                                             roomColor == .blue ? .toggleStatus :
                                             .toggleStatus
        SoundManager.shared.playSound(for: soundType)
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        viewModel.saveRooms()
    }
    
    private func toggleMarkFromMenu() {
        guard let activeRoom = FloatingMenuManager.shared.activeRoom,
              let index = viewModel.rooms.firstIndex(where: { $0.id == activeRoom.id }) else { return }
        
        provideHapticFeedback()
        FloatingMenuManager.shared.hideMenu()
        
        let beforeState = viewModel.rooms // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –î–û –∏–∑–º–µ–Ω–µ–Ω–∏—è
        viewModel.rooms[index].isMarked.toggle()
        let afterState = viewModel.rooms // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ü–û–°–õ–ï –∏–∑–º–µ–Ω–µ–Ω–∏—è
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        if viewModel.rooms[index].isMarked {
            ActionHistoryManager.shared.recordMark(
                roomNumber: viewModel.rooms[index].number,
                beforeState: beforeState,
                afterState: afterState
            )
        } else {
            ActionHistoryManager.shared.recordUnmark(
                roomNumber: viewModel.rooms[index].number,
                beforeState: beforeState,
                afterState: afterState
            )
        }
        
        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫
        SoundManager.shared.playSound(for: .toggleStatus)
        
        viewModel.saveRooms()
    }
    
    private func toggleDeepCleanFromMenu() {
        guard let activeRoom = FloatingMenuManager.shared.activeRoom,
              let index = viewModel.rooms.firstIndex(where: { $0.id == activeRoom.id }) else { return }
        
        provideHapticFeedback()
        FloatingMenuManager.shared.hideMenu()
        
        let beforeState = viewModel.rooms // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –î–û –∏–∑–º–µ–Ω–µ–Ω–∏—è
        viewModel.rooms[index].isDeepCleaned.toggle()
        let afterState = viewModel.rooms // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ü–û–°–õ–ï –∏–∑–º–µ–Ω–µ–Ω–∏—è
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        if viewModel.rooms[index].isDeepCleaned {
            ActionHistoryManager.shared.recordMarkDeepClean(
                roomNumber: viewModel.rooms[index].number,
                beforeState: beforeState,
                afterState: afterState
            )
        } else {
            ActionHistoryManager.shared.recordUnmarkDeepClean(
                roomNumber: viewModel.rooms[index].number,
                beforeState: beforeState,
                afterState: afterState
            )
        }
        
        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫
        SoundManager.shared.playSound(for: .toggleStatus)
        
        viewModel.saveRooms()
    }
    
    private func setTimeFromMenu() {
        guard let activeRoom = FloatingMenuManager.shared.activeRoom else { return }
        
        FloatingMenuManager.shared.hideMenu()
        selectedRoom = activeRoom
        
        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫
        SoundManager.shared.playSound(for: .toggleStatus)
        
        activeSheet = .timePicker
    }
    
    private func deleteRoomFromMenu() {
        guard let activeRoom = FloatingMenuManager.shared.activeRoom,
              let _ = viewModel.rooms.firstIndex(where: { $0.id == activeRoom.id }) else { return }
        
        provideHapticFeedback()
        FloatingMenuManager.shared.hideMenu()
        
        let roomId = activeRoom.id.uuidString
        let roomNumber = activeRoom.number
        let prevColor = activeRoom.color
        let prevRooms = viewModel.rooms
        
        // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–ù–ê–ß–ê–õ–ê —É–¥–∞–ª—è–µ–º –∏–∑ Firebase
        Task {
            do {
                try await FirebaseManager.shared.deleteRoom(roomId)
                print("‚úÖ –ö–æ–º–Ω–∞—Ç–∞ \(roomNumber) —É–¥–∞–ª–µ–Ω–∞ –∏–∑ Firebase (–º–µ–Ω—é)")
                
                // –ó–ê–¢–ï–ú —É–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –ë–ï–ó –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò (–≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ)
                await MainActor.run {
                    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
                    ActionHistoryManager.shared.recordDeleteRoom(
                        roomNumber: roomNumber,
                        prevColor: prevColor,
                        rooms: prevRooms
                    )
                    
                    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫
                    SoundManager.shared.playSound(for: .toggleStatus)
                    
                    // –£–¥–∞–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É –ª–æ–∫–∞–ª—å–Ω–æ
                    if let currentIndex = viewModel.rooms.firstIndex(where: { $0.id == activeRoom.id }) {
                        viewModel.rooms.remove(at: currentIndex)
                    }
                    
                    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ, –ë–ï–ó Firebase —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏  
                    viewModel.saveRoomsLocally() // –í–º–µ—Å—Ç–æ viewModel.saveRooms()
                }
            } catch {
                print("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã \(roomNumber) –∏–∑ Firebase (–º–µ–Ω—é): \(error)")
            }
        }
    }
    
    private func toggleBefore930FromMenu() {
        guard let activeRoom = FloatingMenuManager.shared.activeRoom,
              let index = viewModel.rooms.firstIndex(where: { $0.id == activeRoom.id }) else { return }
        
        provideHapticFeedback()
        FloatingMenuManager.shared.hideMenu()
        
        let prevColor = viewModel.rooms[index].color
        
        if viewModel.rooms[index].color == .white {
            // –ï—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –±–µ–ª–∞—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –∂–µ–ª—Ç–æ–º—É –∏ —É–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ "—Å–¥–µ–ª–∞–Ω–æ –¥–æ 9:30"
            viewModel.rooms[index].color = .none
            viewModel.rooms[index].noneTimestamp = Date()
            viewModel.rooms[index].isCompletedBefore930 = false
            
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
            ActionHistoryManager.shared.recordColorChange(
                roomNumber: viewModel.rooms[index].number,
                prevColor: .white,
                newColor: .none,
                rooms: viewModel.rooms
            )
        } else {
            // –ï—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –Ω–µ –±–µ–ª–∞—è, –¥–µ–ª–∞–µ–º –µ—ë –±–µ–ª–æ–π –∏ —Å—Ç–∞–≤–∏–º —Ñ–ª–∞–≥ "—Å–¥–µ–ª–∞–Ω–æ –¥–æ 9:30"
            viewModel.rooms[index].color = .white
            viewModel.rooms[index].isCompletedBefore930 = true
            viewModel.rooms[index].whiteTimestamp = Date() // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –±–µ–ª–æ–π —è—á–µ–π–∫–∏
            
            // –°–ë–†–ê–°–´–í–ê–ï–ú –í–°–ï –ù–ê–°–¢–†–û–ô–ö–ò –∫—Ä–æ–º–µ whiteTimestamp –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ "—Å–¥–µ–ª–∞–Ω–æ –¥–æ 9:30"
            viewModel.rooms[index].availableTime = nil
            viewModel.rooms[index].redTimestamp = nil
            viewModel.rooms[index].greenTimestamp = nil
            viewModel.rooms[index].blueTimestamp = nil
            viewModel.rooms[index].noneTimestamp = nil
            viewModel.rooms[index].isMarked = false
            viewModel.rooms[index].isDeepCleaned = false
            
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é - –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
            ActionHistoryManager.shared.recordColorChange(
                roomNumber: viewModel.rooms[index].number,
                prevColor: prevColor,
                newColor: .white,
                rooms: viewModel.rooms
            )
        }
        
        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫
        SoundManager.shared.playSound(for: .toggleStatus)
        
        viewModel.saveRooms()
    }
    
    // MARK: - –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å clipboard
    private func setClipboardMessage(for room: Room, color: Room.RoomColor) {
        let now = Date()
        let formattedTime = formatTimeInAmericanStyle(now)
        
        var clipboardText = ""
        
        switch color {
        case .red:
            clipboardText = String(format: redMessageTemplate, room.number, formattedTime)
            if includeSpanish {
                clipboardText += " / " + String(format: redMessageTemplateES, room.number, formattedTime)
            }
        case .green:
            clipboardText = String(format: greenMessageTemplate, room.number, formattedTime)
            if includeSpanish {
                clipboardText += " / " + String(format: greenMessageTemplateES, room.number, formattedTime)
            }
        default:
            return // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ü–≤–µ—Ç–æ–≤ –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º clipboard
        }
        
        UIPasteboard.general.string = clipboardText
    }
}

// –ù–æ–≤–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è View –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
extension Image {
    @ViewBuilder
    func applyScalingMode(mode: Int, sourceImageSize: CGSize) -> some View {
        switch mode {
        case 0: // Fill
            self.scaledToFill()
        case 1: // Fit
            self.scaledToFit()
        case 2: // Stretch
            // –î–ª—è Stretch –º—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º .aspectRatio, –ø–æ–∑–≤–æ–ª—è—è frame —Ä–∞—Å—Ç—è–Ω—É—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self
        case 3: // Original
            // –î–ª—è Original —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º frame –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–≤–Ω—ã–º –µ–≥–æ sourceImageSize,
            // .clipped() –≤ –≤—ã–∑—ã–≤–∞—é—â–µ–º –∫–æ–¥–µ –ø–æ–∑–∞–±–æ—Ç–∏—Ç—Å—è –æ–± –æ–±—Ä–µ–∑–∫–µ –µ—Å–ª–∏ –æ–Ω–æ –±–æ–ª—å—à–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.
            // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—å—à–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, –æ–Ω–æ –±—É–¥–µ—Ç –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ, —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ.
            self.frame(width: sourceImageSize.width, height: sourceImageSize.height)
        default:
            self.scaledToFill() // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é Fill
        }
    }
}
