import SwiftUI
import Combine

// MARK: - –í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
class HighPerformanceEffectManager: ObservableObject {
    static let shared = HighPerformanceEffectManager()
    
    @Published var isCrazyModeActive: Bool = false
    @Published var intensity: CGFloat = 1.0
    @Published var globalTime: Double = 0
    
    // SMART PERFORMANCE: –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    @Published var isScrolling: Bool = false
    @Published var scrollPauseActive: Bool = false
    
    // –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π CADisplayLink –¥–ª—è –≤—Å–µ—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ - –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞
    private var displayLink: CADisplayLink?
    private var currentFPS: Double = 120.0 // –í–°–ï–ì–î–ê –Ω–∞—á–∏–Ω–∞–µ–º —Å 120fps –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
    private let targetFPS: Double = 120.0
    private let scrollingFPS: Double = 30.0 // –í–æ –≤—Ä–µ–º—è —Å–∫—Ä–æ–ª–ª–∞ —Å–Ω–∏–∂–∞–µ–º –¥–æ 30fps
    private var lastTimestamp: CFTimeInterval = 0
    
    // –£–º–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä —Å–∫—Ä–æ–ª–ª–∞
    private var scrollTimer: Timer?
    private var resumeTimer: Timer?
    private let scrollPauseDelay: TimeInterval = 0.02 // –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –ø–∞—É–∑–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ (–±—ã–ª–æ 0.1—Å)
    private let resumeDelay: TimeInterval = 0.1 // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    
         // –ö—ç—à –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
     private var transformCache: [UUID: CachedTransform] = [:]
     private var cacheUpdateInterval: Double = 1.0 / AppConfiguration.Performance.cacheUpdateFrequency
     private var lastCacheUpdate: CFTimeInterval = 0
     
     // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     private var activeEffectsCount: Int = 0
     private let maxActiveEffects = AppConfiguration.Performance.maxConcurrentEffects
    
    init() {
        setupDisplayLink()
        
        // –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ —Ñ–æ–Ω
        NotificationCenter.default.addObserver(
            self,
            selector: #selector(handleDidEnterBackground),
            name: UIApplication.didEnterBackgroundNotification,
            object: nil
        )
        
        NotificationCenter.default.addObserver(
            self,
            selector: #selector(handleWillEnterForeground),
            name: UIApplication.willEnterForegroundNotification,
            object: nil
        )
    }
    
    private func setupDisplayLink() {
        displayLink = CADisplayLink(target: self, selector: #selector(updateGlobalTime))
        
        // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –≤–∫–ª—é—á–µ–Ω–∏–µ ProMotion 120Hz –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
        displayLink?.preferredFrameRateRange = CAFrameRateRange(
            minimum: Float(targetFPS),
            maximum: Float(targetFPS), 
            preferred: Float(targetFPS)
        )
        
        updateDisplayLinkFrameRate()
        displayLink?.add(to: .main, forMode: .common)
        displayLink?.add(to: .main, forMode: .tracking) // –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è tracking mode
        
        print("üöÄ ULTRA: CADisplayLink initialized at \(targetFPS)fps MAXIMUM")
    }
    
    // ULTRA PERFORMANCE: –ü–æ–ª–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ CADisplayLink –≤–æ –≤—Ä–µ–º—è —Å–∫—Ä–æ–ª–ª–∞
    private func updateDisplayLinkFrameRate() {
        if scrollPauseActive {
            // –ü–û–õ–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –≤–æ –≤—Ä–µ–º—è —Å–∫—Ä–æ–ª–ª–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            displayLink?.isPaused = true
            currentFPS = 0.0
            print("‚ö° ULTRA: CADisplayLink PAUSED for scroll")
            } else {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –ø–æ—Å–ª–µ —Å–∫—Ä–æ–ª–ª–∞ - –í–°–ï–ì–î–ê 120fps –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
            displayLink?.isPaused = false
            currentFPS = targetFPS // –í–°–ï–ì–î–ê 120fps –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
            
            displayLink?.preferredFrameRateRange = CAFrameRateRange(
                minimum: Float(targetFPS),        // –ú–∏–Ω–∏–º—É–º = –º–∞–∫—Å–∏–º—É–º = 120fps
                maximum: Float(targetFPS),        // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ 120fps
                preferred: Float(targetFPS)       // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 120fps
            )
            print("‚ö° ULTRA: CADisplayLink RESUMED at \(targetFPS)fps - –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –°–ö–û–†–û–°–¢–¨")
        }
    }
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–æ–º
    func startScrollDetection() {
        isScrolling = true
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
        scrollTimer?.invalidate()
        
        // –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –ø–∞—É–∑–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞)
        scrollTimer = Timer.scheduledTimer(withTimeInterval: scrollPauseDelay, repeats: false) { _ in
            DispatchQueue.main.async {
                self.scrollPauseActive = true
                self.updateDisplayLinkFrameRate()
                print("‚ö° ULTRA: Effects INSTANTLY paused (active: \(self.activeEffectsCount))")
            }
        }
        
        // –ù–ï–ú–ï–î–õ–ï–ù–ù–ê–Ø –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫—ç—à–∞ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        if !scrollPauseActive {
            scrollPauseActive = true
            updateDisplayLinkFrameRate()
        }
    }
    
    func stopScrollDetection() {
        isScrolling = false
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã
        scrollTimer?.invalidate()
        scrollTimer = nil
        resumeTimer?.invalidate()
        
        // –£–ú–ù–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï: –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã —Å–∫—Ä–æ–ª–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è
        resumeTimer = Timer.scheduledTimer(withTimeInterval: resumeDelay, repeats: false) { _ in
            DispatchQueue.main.async {
                self.scrollPauseActive = false
                self.updateDisplayLinkFrameRate()
                print("‚ö° ULTRA: Effects resumed FULL POWER (active: \(self.activeEffectsCount))")
            }
        }
    }
    
    @objc private func updateGlobalTime() {
        let currentTime = CACurrentMediaTime()
        
        if lastTimestamp > 0 {
            let deltaTime = currentTime - lastTimestamp
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º deltaTime –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            let clampedDelta = min(deltaTime, 1.0/60.0)
            globalTime += clampedDelta * Double(intensity)
        }
        
        lastTimestamp = currentTime
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π —Å –≤—ã—Å–æ–∫–æ–π —á–∞—Å—Ç–æ—Ç–æ–π
        if currentTime - lastCacheUpdate >= cacheUpdateInterval {
            updateTransformCache()
            lastCacheUpdate = currentTime
        }
    }
    
    private func updateTransformCache() {
        // SMART PERFORMANCE: –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –µ—Å–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è —Å–∫—Ä–æ–ª–ª–∞
        guard isCrazyModeActive && !scrollPauseActive else { return }
        
        // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã—á–∏—Å–ª—è–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —è—á–µ–µ–∫
        for (cellID, _) in transformCache {
            let newTransform = calculateOptimizedTransform(for: cellID)
            transformCache[cellID] = CachedTransform(
                transform: newTransform,
                lastUpdate: CACurrentMediaTime()
            )
        }
    }
    
         func registerCell(_ cellID: UUID) {
         // SMART DUPLICATE CHECK: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —è—á–µ–π–∫–∞ –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞
         guard transformCache[cellID] == nil else {
             print("üîÑ EFFECT: Cell \(cellID.uuidString.prefix(8)) already registered")
             return
         }
         
         // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
         guard activeEffectsCount < maxActiveEffects else {
             print("‚ö†Ô∏è PERFORMANCE: Reached max active effects limit (\(maxActiveEffects))")
             return
         }
         
         transformCache[cellID] = CachedTransform(
             transform: .neutral,
             lastUpdate: CACurrentMediaTime()
         )
         activeEffectsCount += 1
         print("üéØ EFFECT: Registered cell \(cellID.uuidString.prefix(8)), active: \(activeEffectsCount)/\(maxActiveEffects)")
     }
     
     func unregisterCell(_ cellID: UUID) {
         if transformCache.removeValue(forKey: cellID) != nil {
             activeEffectsCount = max(0, activeEffectsCount - 1)
             print("üéØ EFFECT: Unregistered cell \(cellID.uuidString.prefix(8)), active: \(activeEffectsCount)/\(maxActiveEffects)")
         }
     }
    
    func getTransform(for cellID: UUID) -> RandomTransform {
        guard isCrazyModeActive else { return .neutral }
        
        if let cached = transformCache[cellID] {
            return cached.transform
        } else {
            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é —è—á–µ–π–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
            registerCell(cellID)
            return .neutral
        }
    }
    
    private func calculateOptimizedTransform(for cellID: UUID) -> RandomTransform {
        // SMART PERFORMANCE: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º –µ—Å–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è —Å–∫—Ä–æ–ª–ª–∞
        guard !scrollPauseActive else {
            return .neutral
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—ç—à UUID –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ offset –∫–∞–∂–¥–æ–π —è—á–µ–π–∫–∏
        let cellHash = Double(cellID.hashValue % 1000) / 1000.0
        let time = globalTime + cellHash * 10.0
        
        // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
        let wave1 = sin(time * 2.0)
        let wave2 = cos(time * 1.7 + cellHash * 6.28)
        let combinedWave = wave1 * wave2 * 0.5
        
        // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        let rotation = combinedWave * 1.5 * Double(intensity) // –£–º–µ–Ω—å—à–∏–ª —Å 2.0 –¥–æ 1.5
        let scale = 1.0 + (combinedWave * 0.015 * intensity) // –£–º–µ–Ω—å—à–∏–ª —Å 0.02 –¥–æ 0.015
        
        return RandomTransform(
            rotation: .degrees(rotation),
            scale: scale,
            wave: CGFloat(combinedWave * 0.3) // –£–º–µ–Ω—å—à–∏–ª –≤–æ–ª–Ω–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç
        )
    }
    
    @objc private func handleDidEnterBackground() {
        displayLink?.isPaused = true
    }
    
    @objc private func handleWillEnterForeground() {
        displayLink?.isPaused = false
}

    // –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∫–∞–¥—Ä–æ–≤
    func forceUpdateFrameRate() {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 120fps –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç scrollPauseActive
        currentFPS = targetFPS
        displayLink?.isPaused = false
        
        displayLink?.preferredFrameRateRange = CAFrameRateRange(
            minimum: Float(targetFPS),
            maximum: Float(targetFPS),
            preferred: Float(targetFPS)
        )
        print("üöÄ ULTRA: FORCED frame rate to \(currentFPS)fps MAXIMUM")
    }
    
    // EMERGENCY: –°–±—Ä–æ—Å –≤—Å–µ—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    func resetAllEffects() {
        transformCache.removeAll()
        activeEffectsCount = 0
        scrollPauseActive = false
        scrollTimer?.invalidate()
        scrollTimer = nil
        resumeTimer?.invalidate()
        resumeTimer = nil
        updateDisplayLinkFrameRate()
        print("üîÑ EMERGENCY: All effects reset, count: \(activeEffectsCount)")
    }
    
    deinit {
        displayLink?.invalidate()
        scrollTimer?.invalidate()
        resumeTimer?.invalidate()
        NotificationCenter.default.removeObserver(self)
    }
}

// –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
struct CachedTransform {
    let transform: RandomTransform
    let lastUpdate: CFTimeInterval
}

// MARK: - –í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
struct OptimizedCrazyEffectModifier: ViewModifier {
    let cellID: UUID
    @ObservedObject private var effectManager = HighPerformanceEffectManager.shared
    
    func body(content: Content) -> some View {
        Group {
            if effectManager.isCrazyModeActive {
                let transform = effectManager.getTransform(for: cellID)
                
                content
                    .scaleEffect(transform.scale)
                    .rotationEffect(transform.rotation)
                    // –£–±–∏—Ä–∞–µ–º WaveEffect - –æ–Ω —Å–ª–∏—à–∫–æ–º —Ç—è–∂–µ–ª—ã–π –¥–ª—è GPU
                    // .modifier(OptimizedWaveEffect(wave: transform.wave))
                    .animation(
                        // ULTRA: –£–±–∏—Ä–∞–µ–º –í–°–ï –∞–Ω–∏–º–∞—Ü–∏–∏ –≤–æ –≤—Ä–µ–º—è —Å–∫—Ä–æ–ª–ª–∞ –¥–ª—è 120fps
                        effectManager.scrollPauseActive ? .none : .linear(duration: AppConfiguration.Performance.effectTransitionDuration), 
                        value: transform
                    )
                    // –£–±–∏—Ä–∞–µ–º drawingGroup - –º–æ–∂–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å–æ —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–æ–º
            } else {
                content
                // –ù–µ—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —Å—Ç–∞—Ç–∏—á–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            }
        }
        .onAppear {
            effectManager.registerCell(cellID)
        }
        .onDisappear {
            effectManager.unregisterCell(cellID)
        }
    }
}

// MARK: - –õ–µ–≥–∫–∏–π –≤–æ–ª–Ω–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
struct OptimizedWaveEffect: GeometryEffect {
    var wave: CGFloat
    
    var animatableData: CGFloat {
        get { wave }
        set { wave = newValue }
    }
    
    func effectValue(size: CGSize) -> ProjectionTransform {
        // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏—Å–∫—Ä–∏–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ wave > –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        guard abs(wave) > 0.1 else { return ProjectionTransform(.identity) }
        
        // –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –±–µ–∑ 3D
        let angle = wave * .pi / 60 // –ï—â–µ –º–µ–Ω—å—à–∏–π —É–≥–æ–ª –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        let transform = CGAffineTransform(rotationAngle: angle)
        
        return ProjectionTransform(transform)
    }
}

// MARK: - –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
struct CrazyEffectModifier: ViewModifier {
    let cellID: UUID
    
    func body(content: Content) -> some View {
        content.modifier(OptimizedCrazyEffectModifier(cellID: cellID))
    }
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
extension View {
    func crazyEffect(cellID: UUID) -> some View {
        self.modifier(OptimizedCrazyEffectModifier(cellID: cellID))
    }
} 