import Foundation

/// –ü—Ä–æ—Å—Ç–∞—è –∑–∞–ø–∏—Å—å –¥–µ–π—Å—Ç–≤–∏—è –≤ –∏—Å—Ç–æ—Ä–∏–∏
struct SimpleActionRecord: Codable, Identifiable {
    let id: UUID
    let timestamp: Date
    let actionType: SimpleActionType
    let roomNumber: String?
    let description: String
    let beforeSnapshot: [Room]
    let afterSnapshot: [Room]
    
    init(id: UUID = UUID(), timestamp: Date = Date(), actionType: SimpleActionType, roomNumber: String?, description: String, beforeSnapshot: [Room], afterSnapshot: [Room]) {
        self.id = id
        self.timestamp = timestamp
        self.actionType = actionType
        self.roomNumber = roomNumber
        self.description = description
        self.beforeSnapshot = beforeSnapshot
        self.afterSnapshot = afterSnapshot
    }
    
    var timeString: String {
        let formatter = DateFormatter()
        formatter.dateFormat = "HH:mm:ss"
        return formatter.string(from: timestamp)
    }
    
    var shortDescription: String {
        return description.count > 50 ? String(description.prefix(47)) + "..." : description
    }
}

/// –ü—Ä–æ—Å—Ç—ã–µ —Ç–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π - –±–µ–∑ –ª–∏—à–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
enum SimpleActionType: String, Codable, CaseIterable {
    case addRoom = "add"           // –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É
    case deleteRoom = "delete"     // –£–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É  
    case changeStatus = "status"   // –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å
    case toggleMark = "mark"       // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –º–µ—Ç–∫—É
    case setTime = "time"          // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è
    case clearAll = "clear"        // –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ
    case deepClean = "deep"        // Deep Clean –æ–ø–µ—Ä–∞—Ü–∏–∏
    case systemChange = "system"   // –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤, layout –∏ –¥—Ä—É–≥–∏—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    
    var icon: String {
        switch self {
        case .addRoom: return "plus.circle.fill"
        case .deleteRoom: return "minus.circle.fill" 
        case .changeStatus: return "paintbrush.fill"
        case .toggleMark: return "flag.fill"
        case .setTime: return "clock.fill"
        case .clearAll: return "trash.fill"
        case .deepClean: return "sparkles"
        case .systemChange: return "slider.horizontal.3"
        }
    }
    
    var color: String {
        switch self {
        case .addRoom: return "green"
        case .deleteRoom: return "red"
        case .changeStatus: return "orange" 
        case .toggleMark: return "blue"
        case .setTime: return "purple"
        case .clearAll: return "pink"
        case .deepClean: return "indigo"
        case .systemChange: return "gray"
        }
    }
}

/// –ü—Ä–æ—Å—Ç–æ–π –∏ —á–µ—Ç–∫–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ - –±–µ–∑ –≤—Å—è–∫–æ–π —Ñ–∏–≥–Ω–∏!
class SimpleHistoryManager: ObservableObject {
    static let shared = SimpleHistoryManager()
    
    @Published var history: [SimpleActionRecord] = []
    private let maxHistorySize = 10 // –ñ–µ—Å—Ç–∫–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 –∑–∞–ø–∏—Å—è–º–∏!
    
    private init() {
        loadHistory()
    }
    
    /// –ó–∞–ø–∏—Å–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é - –ø—Ä–æ—Å—Ç–æ –∏ —è—Å–Ω–æ!
    func recordAction(
        type: SimpleActionType,
        description: String,
        roomNumber: String? = nil,
        beforeState: [Room],
        afterState: [Room]
    ) {
        let record = SimpleActionRecord(
            actionType: type,
            roomNumber: roomNumber,
            description: description,
            beforeSnapshot: beforeState,
            afterSnapshot: afterState
        )
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
        history.insert(record, at: 0)
        
        // –ë–µ–∑–∂–∞–ª–æ—Å—Ç–Ω–æ –æ–±—Ä–µ–∑–∞–µ–º –¥–æ 10 –∑–∞–ø–∏—Å–µ–π
        if history.count > maxHistorySize {
            history = Array(history.prefix(maxHistorySize))
        }
        
        saveHistory()
        print("üéØ –ò–°–¢–û–†–ò–Ø: \(description)")
    }
    
    /// –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ - –∫–∞–∫ —É–¥–∞—Ä –Ω–∞–∑–∞–¥!
    func undoLastAction() -> [Room]? {
        guard !history.isEmpty else { 
            print("‚ùå –ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å!")
            return nil 
        }
        
        let lastRecord = history.removeFirst()
        saveHistory()
        
        print("‚è™ –û–¢–ú–ï–ù–ê: \(lastRecord.description)")
        return lastRecord.beforeSnapshot
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    func getLastAction() -> SimpleActionRecord? {
        return history.first
    }
    
    /// –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é - —Ç–∞–±—É–ª–∞ —Ä–∞—Å–∞!
    func clearHistory() {
        history.removeAll()
        saveHistory()
        print("üßπ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞!")
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π
    func getChangeStats() -> (total: Int, byType: [SimpleActionType: Int]) {
        var stats: [SimpleActionType: Int] = [:]
        
        for type in SimpleActionType.allCases {
            stats[type] = history.filter { $0.actionType == type }.count
        }
        
        return (total: history.count, byType: stats)
    }
    
    // MARK: - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–∑–∞–≥—Ä—É–∑–∫–∞
    
    private func saveHistory() {
        guard let data = try? JSONEncoder().encode(history),
              let url = getHistoryURL() else {
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
            return
        }
        
        try? data.write(to: url)
    }
    
    private func loadHistory() {
        guard let url = getHistoryURL(),
              let data = try? Data(contentsOf: url),
              let loadedHistory = try? JSONDecoder().decode([SimpleActionRecord].self, from: data) else {
            history = []
            return
        }
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –¥–æ 10 –∑–∞–ø–∏—Å–µ–π
        history = Array(loadedHistory.prefix(maxHistorySize))
        print("üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ \(history.count) –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏")
    }
    
    private func getHistoryURL() -> URL? {
        return FileManager.default
            .urls(for: .documentDirectory, in: .userDomainMask)
            .first?
            .appendingPathComponent("simple_history.json")
    }
}

// MARK: - –£–¥–æ–±–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–µ–π—Å—Ç–≤–∏–π

extension SimpleHistoryManager {
    
    func recordAddRoom(_ roomNumber: String, before: [Room], after: [Room]) {
        recordAction(
            type: .addRoom,
            description: "–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞ \(roomNumber)",
            roomNumber: roomNumber,
            beforeState: before,
            afterState: after
        )
    }
    
    func recordDeleteRoom(_ roomNumber: String, before: [Room], after: [Room]) {
        recordAction(
            type: .deleteRoom,
            description: "–£–¥–∞–ª–µ–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞ \(roomNumber)",
            roomNumber: roomNumber,
            beforeState: before,
            afterState: after
        )
    }
    
    func recordStatusChange(_ roomNumber: String, from: Room.RoomColor, to: Room.RoomColor, before: [Room], after: [Room]) {
        let fromName = colorName(from)
        let toName = colorName(to)
        recordAction(
            type: .changeStatus,
            description: "–ö–æ–º–Ω–∞—Ç–∞ \(roomNumber): \(fromName) ‚Üí \(toName)",
            roomNumber: roomNumber,
            beforeState: before,
            afterState: after
        )
    }
    
    func recordMarkToggle(_ roomNumber: String, marked: Bool, before: [Room], after: [Room]) {
        let action = marked ? "–æ—Ç–º–µ—á–µ–Ω–∞" : "—Å–Ω—è—Ç–∞ –º–µ—Ç–∫–∞"
        recordAction(
            type: .toggleMark,
            description: "–ö–æ–º–Ω–∞—Ç–∞ \(roomNumber) \(action)",
            roomNumber: roomNumber,
            beforeState: before,
            afterState: after
        )
    }
    
    func recordTimeSet(_ roomNumber: String, time: String?, before: [Room], after: [Room]) {
        let action = time != nil ? "—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è \(time!)" : "—É–¥–∞–ª–µ–Ω–æ –≤—Ä–µ–º—è"
        recordAction(
            type: .setTime,
            description: "–ö–æ–º–Ω–∞—Ç–∞ \(roomNumber): \(action)",
            roomNumber: roomNumber,
            beforeState: before,
            afterState: after
        )
    }
    
    func recordClearAll(before: [Room], after: [Room]) {
        recordAction(
            type: .clearAll,
            description: "–û—á–∏—â–µ–Ω—ã –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã (\(before.count) ‚Üí \(after.count))",
            beforeState: before,
            afterState: after
        )
    }
    
    func recordDeepClean(_ roomNumber: String, marked: Bool, before: [Room], after: [Room]) {
        let action = marked ? "–ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ Deep Clean" : "—Å–Ω—è—Ç–∞ –ø–æ–º–µ—Ç–∫–∞ Deep Clean"
        recordAction(
            type: .deepClean,
            description: "–ö–æ–º–Ω–∞—Ç–∞ \(roomNumber) \(action)",
            roomNumber: roomNumber,
            beforeState: before,
            afterState: after
        )
    }

    func recordSystemChange(_ description: String, before: [Room], after: [Room]) {
        recordAction(
            type: .systemChange,
            description: description,
            roomNumber: nil, // –ù–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∫–æ–º–Ω–∞—Ç—ã
            beforeState: before,
            afterState: after
        )
    }
    
    private func colorName(_ color: Room.RoomColor) -> String {
        switch color {
        case .none: return "–ñ–µ–ª—Ç—ã–π"
        case .red: return "–ö—Ä–∞—Å–Ω—ã–π"
        case .green: return "–ó–µ–ª–µ–Ω—ã–π"
        case .blue: return "–°–∏–Ω–∏–π"
        case .purple: return "–§–∏–æ–ª–µ—Ç–æ–≤—ã–π"
        case .white: return "–ë–µ–ª—ã–π"
        }
    }
}

// MARK: - –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º (–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ª–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏)

/// –í—Ä–µ–º–µ–Ω–Ω—ã–π –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - —É–±—Ä–∞—Ç—å –∫–æ–≥–¥–∞ –≤–µ—Å—å –∫–æ–¥ –±—É–¥–µ—Ç –ø–µ—Ä–µ–ø–∏—Å–∞–Ω!
class ActionHistoryManager: ObservableObject {
    static let shared = ActionHistoryManager()
    
    @Published var actionHistory: [SimpleActionRecord] = []
    
    private let simpleHistory = SimpleHistoryManager.shared
    
    private init() {
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
        actionHistory = simpleHistory.history
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        simpleHistory.$history.assign(to: &$actionHistory)
    }
    
    // MARK: - –ú–µ—Ç–æ–¥—ã-–∞–¥–∞–ø—Ç–µ—Ä—ã –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ API
    
    func recordAddRoom(roomNumber: String, rooms: [Room]) {
        // –í–Ω–∏–º–∞–Ω–∏–µ! rooms - —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –î–û –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∏–∑ ContentView)
        // –ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ü–û–°–õ–ï –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        let beforeState = rooms
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ –∫ —Ç–µ–∫—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        let newRoom = Room(number: roomNumber)
        var afterState = rooms
        afterState.append(newRoom)
        
        simpleHistory.recordAddRoom(roomNumber, before: beforeState, after: afterState)
    }
    
    func recordDeleteRoom(roomNumber: String, prevColor: Room.RoomColor, rooms: [Room]) {
        // –°–æ–∑–¥–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—É—é –∫–æ–º–Ω–∞—Ç—É –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        var beforeState = rooms
        var deletedRoom = Room(number: roomNumber)
        deletedRoom.color = prevColor
        beforeState.append(deletedRoom)
        simpleHistory.recordDeleteRoom(roomNumber, before: beforeState, after: rooms)
    }
    
    func recordColorChange(roomNumber: String, prevColor: Room.RoomColor, newColor: Room.RoomColor, rooms: [Room]) {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        var beforeState = rooms
        if let index = beforeState.firstIndex(where: { $0.number == roomNumber }) {
            beforeState[index].color = prevColor
        }
        simpleHistory.recordStatusChange(roomNumber, from: prevColor, to: newColor, before: beforeState, after: rooms)
    }
    
    func recordMark(roomNumber: String, beforeState: [Room], afterState: [Room]) {
        simpleHistory.recordMarkToggle(roomNumber, marked: true, before: beforeState, after: afterState)
    }
    
    func recordUnmark(roomNumber: String, beforeState: [Room], afterState: [Room]) {
        simpleHistory.recordMarkToggle(roomNumber, marked: false, before: beforeState, after: afterState)
    }
    
    func recordAddTime(roomNumber: String, time: Date, rooms: [Room]) {
        let formatter = DateFormatter()
        formatter.timeStyle = .short
        let timeString = formatter.string(from: time)
        
        var beforeState = rooms
        if let index = beforeState.firstIndex(where: { $0.number == roomNumber }) {
            beforeState[index].availableTime = nil
        }
        simpleHistory.recordTimeSet(roomNumber, time: timeString, before: beforeState, after: rooms)
    }
    
    func recordRemoveTime(roomNumber: String, prevTime: Date, rooms: [Room]) {
        let formatter = DateFormatter()
        formatter.timeStyle = .short
        let timeString = formatter.string(from: prevTime)
        
        var beforeState = rooms
        if let index = beforeState.firstIndex(where: { $0.number == roomNumber }) {
            beforeState[index].availableTime = timeString
        }
        simpleHistory.recordTimeSet(roomNumber, time: nil, before: beforeState, after: rooms)
    }
    
    func recordClearAll(rooms: [Room]) {
        // –î–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö - –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–≤–Ω–æ —Ç–µ–∫—É—â–µ–º—É
        simpleHistory.recordClearAll(before: rooms, after: [])
    }
    
    func recordRestore(rooms: [Room]) {
        simpleHistory.recordAction(
            type: .clearAll,
            description: "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç (\(rooms.count) –∫–æ–º–Ω–∞—Ç)",
            beforeState: [],
            afterState: rooms
        )
    }
    
    func recordToggleWhiteRoomsVisibility(isHidden: Bool, rooms: [Room]) {
        let description = isHidden ? "–°–∫—Ä—ã—Ç—ã –±–µ–ª—ã–µ –∫–æ–º–Ω–∞—Ç—ã" : "–ü–æ–∫–∞–∑–∞–Ω—ã –±–µ–ª—ã–µ –∫–æ–º–Ω–∞—Ç—ã"
        simpleHistory.recordSystemChange(description, before: rooms, after: rooms)
    }
    
    func recordFilterChange(name: String, description: String, rooms: [Room]) {
        simpleHistory.recordSystemChange(description, before: rooms, after: rooms)
    }
    
    func recordMarkDeepClean(roomNumber: String, beforeState: [Room], afterState: [Room]) {
        simpleHistory.recordDeepClean(roomNumber, marked: true, before: beforeState, after: afterState)
    }
    
    func recordUnmarkDeepClean(roomNumber: String, beforeState: [Room], afterState: [Room]) {
        simpleHistory.recordDeepClean(roomNumber, marked: false, before: beforeState, after: afterState)
    }
    
    func getLastAction() -> SimpleActionRecord? {
        return simpleHistory.getLastAction()
    }
    
    func getPreviousRoomsState() -> [Room]? {
        return simpleHistory.getLastAction()?.beforeSnapshot
    }
    
    func removeLastAction() {
        _ = simpleHistory.undoLastAction()
    }
    
    func getAllBackups() -> [SimpleActionRecord] {
        return simpleHistory.history
    }
    
    func clearHistory() {
        simpleHistory.clearHistory()
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞–ø—Ä—è–º—É—é (–¥–ª—è Firebase —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)
    func addRecord(_ record: HistoryRecord) {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ActionType –≤ SimpleActionType
        let simpleActionType: SimpleActionType
        switch record.actionType {
        case .addRoom:
            simpleActionType = .addRoom
        case .changeStatus:
            simpleActionType = .changeStatus
        case .markRoom:
            simpleActionType = .toggleMark
        case .completeRoom:
            simpleActionType = .toggleMark
        case .deepClean:
            simpleActionType = .deepClean
        case .deleteRoom:
            simpleActionType = .deleteRoom
        case .syncUpdate:
            simpleActionType = .systemChange
        case .syncDelete:
            simpleActionType = .systemChange
        }
        
        let simpleRecord = SimpleActionRecord(
            id: record.id,
            timestamp: record.timestamp,
            actionType: simpleActionType,
            roomNumber: record.roomNumber,
            description: record.description,
            beforeSnapshot: [], // –î–ª—è Firebase –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç —Å–Ω–∏–º–∫–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            afterSnapshot: []
        )
        simpleHistory.history.append(simpleRecord)
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ UserDefaults
        if let data = try? JSONEncoder().encode(simpleHistory.history) {
            UserDefaults.standard.set(data, forKey: "actionHistory")
        }
    }
}

// MARK: - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

typealias ActionRecord = SimpleActionRecord

