import SwiftUI
import Combine

// MARK: - –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è Floating Menu
class FloatingMenuManager: ObservableObject {
    static let shared = FloatingMenuManager()
    
    @Published var isMenuVisible = false
    @Published var menuPosition: CGPoint = .zero
    @Published var activeRoom: Room?
    @Published var sourceFrame: CGRect = .zero
    
    private var screenBounds: CGRect = UIScreen.main.bounds
    
    private init() {}
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã
    func showMenu(for room: Room, sourceFrame: CGRect) {
        // –ï—Å–ª–∏ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–æ –º–µ–Ω—é, —Å–Ω–∞—á–∞–ª–∞ —Å–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
        if isMenuVisible {
            hideMenu()
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
                self.displayMenu(for: room, sourceFrame: sourceFrame)
            }
        } else {
            displayMenu(for: room, sourceFrame: sourceFrame)
        }
    }
    
    private func displayMenu(for room: Room, sourceFrame: CGRect) {
        self.activeRoom = room
        self.sourceFrame = sourceFrame
        self.menuPosition = calculateOptimalPosition(sourceFrame: sourceFrame)
        
        withAnimation(.spring(response: 0.4, dampingFraction: 0.8)) {
            self.isMenuVisible = true
        }
    }
    
    // –°–∫—Ä—ã—Ç—å –º–µ–Ω—é
    func hideMenu() {
        withAnimation(.spring(response: 0.3, dampingFraction: 0.9)) {
            isMenuVisible = false
        }
        
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.3) {
            self.activeRoom = nil
        }
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω—é —Å –ø–æ–ª–Ω–æ–π –∑–∞—â–∏—Ç–æ–π –æ—Ç –≤—ã—Ö–æ–¥–∞ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
    private func calculateOptimalPosition(sourceFrame: CGRect) -> CGPoint {
        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        let baseMenuHeight: CGFloat = 160 // –ë–∞–∑–æ–≤–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç
        let expandedMenuHeight: CGFloat = 220 // –í—ã—Å–æ—Ç–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –º–µ–Ω—é
        let menuWidth: CGFloat = 280
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –º–µ–Ω—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
        let isLocked = activeRoom?.isCompletedBefore930 ?? false
        let menuHeight = isLocked ? baseMenuHeight : expandedMenuHeight
        let menuSize = CGSize(width: menuWidth, height: menuHeight)
        
        let safetyPadding: CGFloat = 20 // –û—Ç—Å—Ç—É–ø –æ—Ç –∫—Ä–∞–µ–≤ —ç–∫—Ä–∞–Ω–∞
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —ç–∫—Ä–∞–Ω–∞
        screenBounds = UIScreen.main.bounds
        
        // –£—á–∏—Ç—ã–≤–∞–µ–º safe area
        let safeAreaTop: CGFloat = 100 // –ü—Ä–∏–º–µ—Ä–Ω—ã–π –æ—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É –¥–ª—è —Å—Ç–∞—Ç—É—Å –±–∞—Ä–∞ –∏ navigation
        let safeAreaBottom: CGFloat = 50 // –ü—Ä–∏–º–µ—Ä–Ω—ã–π –æ—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É –¥–ª—è home indicator
        
        // –î–æ—Å—Ç—É–ø–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –º–µ–Ω—é
        let availableMinX = safetyPadding
        let availableMaxX = screenBounds.width - safetyPadding
        let availableMinY = safeAreaTop + safetyPadding
        let availableMaxY = screenBounds.height - safeAreaBottom - safetyPadding
        
        // –†–∞–∑–º–µ—Ä—ã –º–µ–Ω—é
        let menuHalfWidth = menuSize.width / 2
        let menuHalfHeight = menuSize.height / 2
        
        // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è - –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –ø–æ —Ü–µ–Ω—Ç—Ä—É —è—á–µ–π–∫–∏
        var targetX = sourceFrame.midX
        var targetY = sourceFrame.midY
        
        // –ü–†–û–í–ï–†–ö–ê –ò –ö–û–†–†–ï–ö–¶–ò–Ø –ü–û –ì–û–†–ò–ó–û–ù–¢–ê–õ–ò
        // –õ–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –º–µ–Ω—é –Ω–µ –¥–æ–ª–∂–Ω–∞ –≤—ã—Ö–æ–¥–∏—Ç—å –∑–∞ –ª–µ–≤—ã–π –∫—Ä–∞–π
        if targetX - menuHalfWidth < availableMinX {
            targetX = availableMinX + menuHalfWidth
        }
        
        // –ü—Ä–∞–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –º–µ–Ω—é –Ω–µ –¥–æ–ª–∂–Ω–∞ –≤—ã—Ö–æ–¥–∏—Ç—å –∑–∞ –ø—Ä–∞–≤—ã–π –∫—Ä–∞–π
        if targetX + menuHalfWidth > availableMaxX {
            targetX = availableMaxX - menuHalfWidth
        }
        
        // –ü–†–û–í–ï–†–ö–ê –ò –ö–û–†–†–ï–ö–¶–ò–Ø –ü–û –í–ï–†–¢–ò–ö–ê–õ–ò
        // –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –º–µ–Ω—é –Ω–µ –¥–æ–ª–∂–Ω–∞ –≤—ã—Ö–æ–¥–∏—Ç—å –∑–∞ –≤–µ—Ä—Ö–Ω–∏–π –∫—Ä–∞–π
        if targetY - menuHalfHeight < availableMinY {
            targetY = availableMinY + menuHalfHeight
        }
        
        // –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –º–µ–Ω—é –Ω–µ –¥–æ–ª–∂–Ω–∞ –≤—ã—Ö–æ–¥–∏—Ç—å –∑–∞ –Ω–∏–∂–Ω–∏–π –∫—Ä–∞–π
        if targetY + menuHalfHeight > availableMaxY {
            targetY = availableMaxY - menuHalfHeight
        }
        
        // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –µ—Å–ª–∏ —è—á–µ–π–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ–±–ª–µ–º–Ω–æ–º –º–µ—Å—Ç–µ,
        // —Å–º–µ—â–∞–µ–º –º–µ–Ω—é –≤ –±–æ–ª–µ–µ —É–¥–æ–±–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ª–∏ –º–µ–Ω—é —Å —è—á–µ–π–∫–æ–π
        let menuRect = CGRect(
            x: targetX - menuHalfWidth,
            y: targetY - menuHalfHeight,
            width: menuSize.width,
            height: menuSize.height
        )
        
        if menuRect.intersects(sourceFrame) {
            // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –º–µ–Ω—é —Å–ø—Ä–∞–≤–∞ –æ—Ç —è—á–µ–π–∫–∏
            let rightX = sourceFrame.maxX + menuHalfWidth + 10
            if rightX + menuHalfWidth <= availableMaxX {
                targetX = rightX
            }
            // –ï—Å–ª–∏ —Å–ø—Ä–∞–≤–∞ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è, —Ä–∞–∑–º–µ—â–∞–µ–º —Å–ª–µ–≤–∞
            else {
                let leftX = sourceFrame.minX - menuHalfWidth - 10
                if leftX - menuHalfWidth >= availableMinX {
                    targetX = leftX
                }
            }
            
            // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª–∏: –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–≤–µ—Ä—Ö—É
            let topY = sourceFrame.minY - menuHalfHeight - 10
            if topY - menuHalfHeight >= availableMinY {
                targetY = topY
            }
            // –ï—Å–ª–∏ —Å–≤–µ—Ä—Ö—É –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è, —Ä–∞–∑–º–µ—â–∞–µ–º —Å–Ω–∏–∑—É
            else {
                let bottomY = sourceFrame.maxY + menuHalfHeight + 10
                if bottomY + menuHalfHeight <= availableMaxY {
                    targetY = bottomY
                }
            }
        }
        
        // –§–ò–ù–ê–õ–¨–ù–ê–Ø –ó–ê–©–ò–¢–ê: –µ—Å–ª–∏ –∫–∞–∫–∏–º-—Ç–æ –æ–±—Ä–∞–∑–æ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Å–µ –µ—â–µ –≤—ã—Ö–æ–¥—è—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã,
        // –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Ö –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        targetX = max(availableMinX + menuHalfWidth, min(availableMaxX - menuHalfWidth, targetX))
        targetY = max(availableMinY + menuHalfHeight, min(availableMaxY - menuHalfHeight, targetY))
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –≤ —Ä–µ–ª–∏–∑–µ)
        print("üìç Menu positioning:")
        print("   Source frame: \(sourceFrame)")
        print("   Screen bounds: \(screenBounds)")
        print("   Menu size: \(menuSize) (locked: \(isLocked))")
        print("   Available area: x=\(availableMinX)-\(availableMaxX), y=\(availableMinY)-\(availableMaxY)")
        print("   Final position: (\(targetX), \(targetY))")
        print("   Menu bounds: (\(targetX - menuHalfWidth), \(targetY - menuHalfHeight)) to (\(targetX + menuHalfWidth), \(targetY + menuHalfHeight))")
        
        return CGPoint(x: targetX, y: targetY)
    }
    
    // –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
    func updateScreenBounds(_ bounds: CGRect) {
        let oldBounds = screenBounds
        screenBounds = bounds
        
        print("üì± Screen bounds updated: \(oldBounds) -> \(bounds)")
        
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –µ—Å–ª–∏ –º–µ–Ω—é –∞–∫—Ç–∏–≤–Ω–æ
        if isMenuVisible {
            let newPosition = calculateOptimalPosition(sourceFrame: sourceFrame)
            
            // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
            withAnimation(.easeInOut(duration: 0.3)) {
                menuPosition = newPosition
            }
            
            print("üìç Menu position updated due to orientation change: \(newPosition)")
        }
    }
}

// MARK: - Floating Menu View
struct SmartFloatingMenu: View {
    @ObservedObject var manager = FloatingMenuManager.shared
    let viewModel: RoomViewModel
    let getTranslation: (String) -> String
    let onAction: (FloatingMenuAction) -> Void
    
    var body: some View {
        if manager.isMenuVisible, let room = manager.activeRoom {
            ZStack {
                // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é
                Color.black.opacity(0.3)
                    .ignoresSafeArea()
                    .onTapGesture {
                        manager.hideMenu()
                    }
                
                // –°–∞–º–æ –º–µ–Ω—é
                MenuContent(
                    room: room,
                    viewModel: viewModel,
                    getTranslation: getTranslation,
                    onAction: onAction
                )
                .position(manager.menuPosition)
                .transition(.asymmetric(
                    insertion: .scale(scale: 0.1).combined(with: .opacity),
                    removal: .scale(scale: 0.1).combined(with: .opacity)
                ))
            }
            .zIndex(999) // –ü–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ
        }
    }
}

// MARK: - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–µ–Ω—é
struct MenuContent: View {
    let room: Room
    let viewModel: RoomViewModel
    let getTranslation: (String) -> String
    let onAction: (FloatingMenuAction) -> Void
    
    private let isLocked: Bool
    @State private var showDeleteConfirmation = false
    
    init(room: Room, viewModel: RoomViewModel, getTranslation: @escaping (String) -> String, onAction: @escaping (FloatingMenuAction) -> Void) {
        self.room = room
        self.viewModel = viewModel
        self.getTranslation = getTranslation
        self.onAction = onAction
        self.isLocked = room.isCompletedBefore930
    }
    
    var body: some View {
        VStack(spacing: 12) {
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            Text("–ö–æ–º–Ω–∞—Ç–∞ \(room.number)")
                .font(.headline)
                .foregroundColor(.white)
            
            if isLocked {
                // –î–ª—è –∫–æ–º–Ω–∞—Ç "—Å–¥–µ–ª–∞–Ω–æ –¥–æ 9:30" - —Ç–æ–ª—å–∫–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
                VStack(spacing: 8) {
                    Text("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –¥–æ 9:30")
                        .font(.caption)
                        .foregroundColor(.orange)
                    
                    Button(action: { 
                        SoundManager.shared.provideMaximumHapticFeedback()
                        onAction(.toggleBefore930) 
                    }) {
                        ZStack {
                            Text("930")
                                .font(.system(size: 14, weight: .bold))
                                .foregroundColor(.black)
                            
                            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ —Ç–∞–∫ –∫–∞–∫ –∫–æ–º–Ω–∞—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
                            Rectangle()
                                .fill(Color.red)
                                .frame(height: 2)
                                .rotationEffect(.degrees(-15))
                        }
                        .frame(width: 50, height: 50)
                        .background(
                            Circle()
                                .fill(Color.white)
                                .shadow(color: .black.opacity(0.3), radius: 3, x: 0, y: 2)
                        )
                    }
                    .buttonStyle(.plain)
                }
            } else {
                // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç - –ø–æ–ª–Ω–æ–µ –º–µ–Ω—é
                
                // –¶–≤–µ—Ç–æ–≤—ã–µ —Å—Ç–∞—Ç—É—Å—ã
                VStack(spacing: 8) {
                    Text("–°—Ç–∞—Ç—É—Å")
                        .font(.caption)
                        .foregroundColor(.gray)
                    
                    HStack(spacing: 15) {
                        StatusButton(emoji: "üü°", color: .yellow, action: {
                            onAction(.changeColor(.none))
                        })
                        
                        StatusButton(emoji: "üî¥", color: .red, action: {
                            onAction(.changeColor(.red))
                        })
                        
                        StatusButton(emoji: "üü¢", color: .green, action: {
                            onAction(.changeColor(.green))
                        })
                        
                        StatusButton(emoji: "üîµ", color: .blue, action: {
                            onAction(.changeColor(.blue))
                        })
                    }
                }
                
                // –î–µ–π—Å—Ç–≤–∏—è
                VStack(spacing: 8) {
                    Text("–î–µ–π—Å—Ç–≤–∏—è")
                        .font(.caption)
                        .foregroundColor(.gray)
                    
                    HStack(spacing: 15) {
                        // –ü–æ–º–µ—Ç–∫–∞/—Å–Ω—è—Ç–∏–µ –ø–æ–º–µ—Ç–∫–∏
                        ActionButton(
                            icon: room.isMarked ? "flag.slash" : "flag.fill",
                            color: .orange,
                            action: { onAction(.toggleMark) }
                        )
                        
                        // Deep Clean - —Ç–µ–∫—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ "DC" —Å –ø–µ—Ä–µ—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º –∫–æ–≥–¥–∞ –∞–∫—Ç–∏–≤–Ω–∞
                        Button(action: { 
                            SoundManager.shared.provideMaximumHapticFeedback()
                            onAction(.toggleDeepClean) 
                        }) {
                            ZStack {
                                Text("DC")
                                    .font(.system(size: 14, weight: .bold))
                                    .foregroundColor(.white)
                                
                                // –ü–µ—Ä–µ—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ –µ—Å–ª–∏ Deep Clean –∞–∫—Ç–∏–≤–µ–Ω
                                if room.isDeepCleaned {
                                    Rectangle()
                                        .fill(Color.red)
                                        .frame(height: 2)
                                        .rotationEffect(.degrees(-15))
                                }
                            }
                            .frame(width: 45, height: 45)
                            .background(
                                Circle()
                                    .fill(Color.cyan)
                                    .shadow(color: Color.cyan.opacity(0.5), radius: 3, x: 0, y: 2)
                            )
                        }
                        .buttonStyle(.plain)
                        
                        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ - –±—É–¥–∏–ª—å–Ω–∏–∫
                        ActionButton(
                            icon: "alarm.fill",
                            color: .purple,
                            action: { onAction(.setTime) }
                        )
                        
                        // –ö–Ω–æ–ø–∫–∞ "—Å–¥–µ–ª–∞–Ω–æ –¥–æ 9:30" - –±–µ–ª–∞—è —Å —Ç–µ–∫—Å—Ç–æ–º "930" –∏–ª–∏ –ø–µ—Ä–µ—á–µ—Ä–∫–Ω—É—Ç–∞—è
                        Button(action: { 
                            SoundManager.shared.provideMaximumHapticFeedback()
                            onAction(.toggleBefore930) 
                        }) {
                            ZStack {
                                Text("930")
                                    .font(.system(size: 14, weight: .bold))
                                    .foregroundColor(.black)
                                
                                // –ü–µ—Ä–µ—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –±–µ–ª–∞—è (—Å–¥–µ–ª–∞–Ω–∞ –¥–æ 9:30)
                                if room.color == .white {
                                    Rectangle()
                                        .fill(Color.red)
                                        .frame(height: 2)
                                        .rotationEffect(.degrees(-15))
                                }
                            }
                            .frame(width: 45, height: 45)
                            .background(
                                Circle()
                                    .fill(Color.white)
                                    .shadow(color: .black.opacity(0.3), radius: 3, x: 0, y: 2)
                            )
                        }
                        .buttonStyle(.plain)
                        
                        // –£–¥–∞–ª–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
                        Button(action: { 
                            SoundManager.shared.provideMaximumHapticFeedback()
                            showDeleteConfirmation = true 
                        }) {
                            Image(systemName: "trash")
                                .font(.title3)
                                .foregroundColor(.white)
                                .frame(width: 45, height: 45)
                                .background(
                                    Circle()
                                        .fill(Color.red)
                                        .shadow(color: Color.red.opacity(0.5), radius: 3, x: 0, y: 2)
                                )
                        }
                        .buttonStyle(.plain)
                    }
                }
            }
        }
        .padding(20)
        .background(
            RoundedRectangle(cornerRadius: 20)
                .fill(.ultraThinMaterial)
                .overlay(
                    RoundedRectangle(cornerRadius: 20)
                        .stroke(.white.opacity(0.3), lineWidth: 1)
                )
        )
        .shadow(color: .black.opacity(0.3), radius: 15, x: 0, y: 5)
        .frame(maxWidth: 280)
        .alert("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è", isPresented: $showDeleteConfirmation) {
            Button("–û—Ç–º–µ–Ω–∞", role: .cancel) { }
            Button("–£–¥–∞–ª–∏—Ç—å", role: .destructive) {
                onAction(.delete)
            }
        } message: {
            Text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É \(room.number)?")
        }
    }
}

// MARK: - –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
struct StatusButton: View {
    let emoji: String
    let color: Color
    let action: () -> Void
    
    var body: some View {
        Button(action: {
            SoundManager.shared.provideMaximumHapticFeedback()
            action()
        }) {
            Text(emoji)
                .font(.title2)
                .frame(width: 45, height: 45)
                .background(
                    Circle()
                        .fill(color.opacity(0.3))
                        .overlay(
                            Circle()
                                .stroke(color, lineWidth: 2)
                        )
                )
        }
        .buttonStyle(.plain)
    }
}

struct ActionButton: View {
    let icon: String
    let color: Color
    let action: () -> Void
    
    var body: some View {
        Button(action: {
            SoundManager.shared.provideMaximumHapticFeedback()
            action()
        }) {
            Image(systemName: icon)
                .font(.title3)
                .foregroundColor(.white)
                .frame(width: 45, height: 45)
                .background(
                    Circle()
                        .fill(color)
                        .shadow(color: color.opacity(0.5), radius: 3, x: 0, y: 2)
                )
        }
        .buttonStyle(.plain)
    }
}

// MARK: - –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –º–µ–Ω—é
enum FloatingMenuAction {
    case changeColor(Room.RoomColor)
    case toggleMark
    case toggleDeepClean
    case setTime
    case delete
    case toggleBefore930
} 