package com.roommanager.android.firebase

import android.app.Activity
import android.content.Context
import android.os.Build
import android.util.Log
import com.google.android.gms.auth.api.signin.GoogleSignIn
import com.google.android.gms.auth.api.signin.GoogleSignInClient
import com.google.android.gms.auth.api.signin.GoogleSignInOptions
import com.google.android.gms.common.api.ApiException
import com.google.firebase.Timestamp
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.auth.GoogleAuthProvider
import com.google.firebase.firestore.DocumentChange
import com.google.firebase.firestore.FirebaseFirestore
import com.google.firebase.firestore.ListenerRegistration
import com.google.firebase.firestore.MetadataChanges
import com.roommanager.android.R
import com.roommanager.android.model.FirebaseRoom
import com.roommanager.android.model.Room
import com.roommanager.android.model.SyncMetadata
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.tasks.await
import java.util.*

/**
 * Firebase –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å iOS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º RoomManager
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç real-time —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∫–æ–º–Ω–∞—Ç –º–µ–∂–¥—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
 * –í–°–¢–†–û–ï–ù–ù–ê–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–∫–∫–∞—É–Ω—Ç axrbarsic@gmail.com
 */
class FirebaseManager private constructor() {
    
    companion object {
        val instance: FirebaseManager by lazy { FirebaseManager() }
        private const val TAG = "FirebaseManager"
        private const val USERS_COLLECTION = "users"
        private const val ROOMS_COLLECTION = "rooms"
        private const val SYNC_METADATA_COLLECTION = "sync_metadata"
        
        // üîë –í–°–¢–†–û–ï–ù–ù–´–ï –£–ß–ï–¢–ù–´–ï –î–ê–ù–ù–´–ï - axrbarsic@gmail.com
        private const val HARDCODED_USER_ID = "38Pv7JGnFnT8IpVncfGVkYuPzLp2"
        private const val HARDCODED_USER_EMAIL = "axrbarsic@gmail.com"
    }

    private val db = FirebaseFirestore.getInstance()
    private val auth = FirebaseAuth.getInstance()
    
    // Google Sign-In –∫–ª–∏–µ–Ω—Ç (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    private var googleSignInClient: GoogleSignInClient? = null
    
    // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    private val deviceId = "${Build.MODEL}_${UUID.randomUUID()}"
    private val deviceName = "${Build.MANUFACTURER} ${Build.MODEL}"
    
    // Listener –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    private var roomsListener: ListenerRegistration? = null
    
    // StateFlows –¥–ª—è —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ UI
    private val _rooms = MutableStateFlow<List<Room>>(emptyList())
    val rooms: StateFlow<List<Room>> = _rooms.asStateFlow()
    
    private val _isAuthenticated = MutableStateFlow(false)
    val isAuthenticated: StateFlow<Boolean> = _isAuthenticated.asStateFlow()
    
    private val _currentUserEmail = MutableStateFlow<String?>(null)
    val currentUserEmail: StateFlow<String?> = _currentUserEmail.asStateFlow()
    
    private val _isSyncing = MutableStateFlow(false)
    val isSyncing: StateFlow<Boolean> = _isSyncing.asStateFlow()
    
    private val _lastSyncTime = MutableStateFlow<Timestamp?>(null)
    val lastSyncTime: StateFlow<Timestamp?> = _lastSyncTime.asStateFlow()
    
    private val _error = MutableStateFlow<String?>(null)
    val error: StateFlow<String?> = _error.asStateFlow()

    init {
        // üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ü–†–ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò
        Log.d(TAG, "üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FirebaseManager —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        auth.addAuthStateListener { firebaseAuth ->
            val user = firebaseAuth.currentUser
            
            if (user != null) {
                Log.d(TAG, "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: ${user.uid}, email: ${user.email}")
                _isAuthenticated.value = true
                _currentUserEmail.value = HARDCODED_USER_EMAIL // –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π email
                
                // –ù–∞—á–∏–Ω–∞–µ–º —Å–ª—É—à–∞—Ç—å –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                startListeningForRooms(HARDCODED_USER_ID)
            } else {
                Log.d(TAG, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
                _isAuthenticated.value = false
                _currentUserEmail.value = null
                stopListeningForRooms()
            }
        }
    }

    /**
     * üîë –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –° –í–°–¢–†–û–ï–ù–ù–´–ú –ê–ö–ö–ê–£–ù–¢–û–ú
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ axrbarsic@gmail.com
     */
    suspend fun autoSignIn(): Boolean {
        return try {
            _isSyncing.value = true
            _error.value = null
            
            Log.d(TAG, "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è $HARDCODED_USER_EMAIL")
            
            // –ï—Å–ª–∏ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ø–æ–¥ –Ω—É–∂–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            val currentUser = auth.currentUser
            if (currentUser != null) {
                Log.d(TAG, "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ${currentUser.uid}")
                _isAuthenticated.value = true
                _currentUserEmail.value = HARDCODED_USER_EMAIL
                startListeningForRooms(HARDCODED_USER_ID)
                return true
            }
          
            Log.d(TAG, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–æ–Ω–∏–º–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–æ–Ω–∏–º–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ —Å—Ä–∞–∑—É —Å–≤—è–∑—ã–≤–∞–µ–º —Å –Ω—É–∂–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            val result = auth.signInAnonymously().await()
            if (result.user != null) {
                Log.d(TAG, "‚úÖ –ê–Ω–æ–Ω–∏–º–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: ${result.user!!.uid}")
                Log.d(TAG, "‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $HARDCODED_USER_EMAIL")
                _isAuthenticated.value = true
                _currentUserEmail.value = HARDCODED_USER_EMAIL
                
                // –ù–∞—á–∏–Ω–∞–µ–º —Å–ª—É—à–∞—Ç—å –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                startListeningForRooms(HARDCODED_USER_ID)
                return true
            }
            
            Log.e(TAG, "‚ùå –ê–Ω–æ–Ω–∏–º–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
            false
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", e)
            _error.value = "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${e.message}"
            false
        } finally {
            _isSyncing.value = false
        }
    }

    /**
     * –ê–Ω–æ–Ω–∏–º–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
     */
    suspend fun signInAnonymously(): Boolean {
        return autoSignIn()
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–ª—É—à–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ–º–Ω–∞—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
     */
    private fun startListeningForRooms(userId: String) {
        Log.d(TAG, "–ù–∞—á–∏–Ω–∞–µ–º —Å–ª—É—à–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId")
        
        stopListeningForRooms()
        
        // –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –∫–æ—Ä–Ω–µ–≤—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é, –ø–æ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é
        startListeningToRootCollection(userId)
    }
    
    /**
     * –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∫–æ–º–Ω–∞—Ç
     */
    private fun startListeningToRootCollection(fallbackUserId: String) {
        Log.d(TAG, "–ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ 'rooms'")
        
        roomsListener = db.collection("rooms")
            .addSnapshotListener(MetadataChanges.INCLUDE) { snapshot, error ->
                if (error != null) {
                    Log.w(TAG, "–û—à–∏–±–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é: ${error.message}")
                    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
                    startListeningToUserCollection(fallbackUserId)
                    return@addSnapshotListener
                }
                
                if (snapshot != null && !snapshot.isEmpty) {
                    Log.d(TAG, "–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${snapshot.size()}")
                    processRoomsSnapshot(snapshot)
                } else {
                    Log.d(TAG, "–ö–æ—Ä–Ω–µ–≤–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é")
                    startListeningToUserCollection(fallbackUserId)
                }
            }
    }
    
    /**
     * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private fun startListeningToUserCollection(userId: String) {
        Log.d(TAG, "–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏: users/$userId/rooms")
        
        roomsListener?.remove() // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π listener
        
        roomsListener = db.collection(USERS_COLLECTION)
            .document(userId)
            .collection(ROOMS_COLLECTION)
            .addSnapshotListener(MetadataChanges.INCLUDE) { snapshot, error ->
                if (error != null) {
                    Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏", error)
                    _error.value = "–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${error.message}"
                    return@addSnapshotListener
                }
                
                if (snapshot != null) {
                    Log.d(TAG, "–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${snapshot.size()}")
                    processRoomsSnapshot(snapshot)
                } else {
                    Log.w(TAG, "–ü—É—Å—Ç–æ–π snapshot –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
                }
            }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ snapshot –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç (–æ–±—â–∏–π –º–µ—Ç–æ–¥)
     */
    private fun processRoomsSnapshot(snapshot: com.google.firebase.firestore.QuerySnapshot) {
        try {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–π –æ—Ç–ª–∞–¥–∫–∏
            if (!snapshot.metadata.isFromCache) {
                Log.d(TAG, "–ü–æ–ª—É—á–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞ (${snapshot.documentChanges.size} –∏–∑–º–µ–Ω–µ–Ω–∏–π)")
                
                // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ —Ç–∏–ø—É
                val currentRooms = _rooms.value.toMutableList()
                
                snapshot.documentChanges.forEach { change ->
                    Log.d(TAG, "–ò–∑–º–µ–Ω–µ–Ω–∏–µ: —Ç–∏–ø=${change.type}, –¥–æ–∫—É–º–µ–Ω—Ç=${change.document.id}")
                    
                    when (change.type) {
                        DocumentChange.Type.ADDED, DocumentChange.Type.MODIFIED -> {
                            try {
                                val firebaseRoom = change.document.toObject(FirebaseRoom::class.java)
                                Log.d(TAG, "  –ö–æ–º–Ω–∞—Ç–∞: ${firebaseRoom.number}, —Ü–≤–µ—Ç=${firebaseRoom.color}, isMarked=${firebaseRoom.isMarked}, isDeepCleaned=${firebaseRoom.isDeepCleaned}, isCompletedBefore930=${firebaseRoom.isCompletedBefore930}")
                                
                                val localRoom = firebaseRoom.toLocalRoom()
                                Log.d(TAG, "–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞: ${localRoom.number}, isMarked=${localRoom.isMarked}, isDeepCleaned=${localRoom.isDeepCleaned}, isCompletedBefore930=${localRoom.isCompletedBefore930}")
                                
                                // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
                                val existingIndex = currentRooms.indexOfFirst { it.id == localRoom.id }
                                if (existingIndex >= 0) {
                                    currentRooms[existingIndex] = localRoom
                                    Log.d(TAG, "  –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–æ–º–Ω–∞—Ç–∞ ${localRoom.number}")
                                } else {
                                    currentRooms.add(localRoom)
                                    Log.d(TAG, "  –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞ ${localRoom.number}")
                                }
                            } catch (e: Exception) {
                                Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–æ–º–Ω–∞—Ç—ã ${change.document.id}", e)
                            }
                        }
                        
                        DocumentChange.Type.REMOVED -> {
                            val roomId = change.document.id
                            Log.d(TAG, "  üóëÔ∏è –£–î–ê–õ–ï–ù–ò–ï –∫–æ–º–Ω–∞—Ç—ã —Å ID: ${roomId}")
                            
                            // –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–Ω–∞—Ç—É –ø–æ ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ (UUID —Å—Ç—Ä–æ–∫–∞) 
                            val roomToRemove = currentRooms.find { room ->
                                room.id.toString() == roomId
                            }
                            
                            if (roomToRemove != null) {
                                currentRooms.remove(roomToRemove)
                                Log.d(TAG, "  ‚úÖ –£–¥–∞–ª–µ–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞ ${roomToRemove.number} –∏–∑ —Å–ø–∏—Å–∫–∞")
                            } else {
                                Log.w(TAG, "  ‚ö†Ô∏è –ö–æ–º–Ω–∞—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ")
                                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞
                                Log.d(TAG, "  –ò—â–µ–º —Å—Ä–µ–¥–∏ ${currentRooms.size} –∫–æ–º–Ω–∞—Ç:")
                                currentRooms.take(5).forEach { room ->
                                    Log.d(TAG, "    - ${room.number} (ID: ${room.id})")
                                }
                            }
                        }
                    }
                }
                
                // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
                val sortedRooms = currentRooms.sortedBy { it.number }
                _rooms.value = sortedRooms
                _lastSyncTime.value = Timestamp.now()
                _error.value = null
                
                Log.d(TAG, "–û–±–Ω–æ–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç: ${sortedRooms.size} –∫–æ–º–Ω–∞—Ç")
                
                // –ü–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥ –ø–µ—Ä–≤—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ–º–Ω–∞—Ç
                sortedRooms.take(3).forEach { room ->
                    Log.d(TAG, "–ö–æ–º–Ω–∞—Ç–∞ ${room.number}: —Ü–≤–µ—Ç=${room.color}, isMarked=${room.isMarked}, isDeepCleaned=${room.isDeepCleaned}, isCompletedBefore930=${room.isCompletedBefore930}")
                }
            } else {
                Log.d(TAG, "–î–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
            }
            
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç", e)
            _error.value = "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${e.message}"
        }
    }

    /**
     * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ª—É—à–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ–º–Ω–∞—Ç
     */
    private fun stopListeningForRooms() {
        roomsListener?.remove()
        roomsListener = null
        _rooms.value = emptyList()
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
     */
    private suspend fun updateSyncMetadata(userId: String) {
        try {
            val metadata = SyncMetadata(
                id = deviceId,
                lastSyncTimestamp = Timestamp.now(),
                deviceId = deviceId,
                deviceName = deviceName
            )
            
            db.collection(USERS_COLLECTION)
                .document(userId)
                .collection(SYNC_METADATA_COLLECTION)
                .document(deviceId)
                .set(metadata)
                .await()
                
            Log.d(TAG, "–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏", e)
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
     */
    fun getRoomCounts(): Map<String, Int> {
        val currentRooms = _rooms.value
        return mapOf(
            "total" to currentRooms.size,
            "none" to currentRooms.count { it.color == com.roommanager.android.model.RoomColor.NONE },
            "red" to currentRooms.count { it.color == com.roommanager.android.model.RoomColor.RED },
            "green" to currentRooms.count { it.color == com.roommanager.android.model.RoomColor.GREEN },
            "purple" to currentRooms.count { it.color == com.roommanager.android.model.RoomColor.PURPLE },
            "blue" to currentRooms.count { it.color == com.roommanager.android.model.RoomColor.BLUE },
            "white" to currentRooms.count { it.color == com.roommanager.android.model.RoomColor.WHITE },
            "marked" to currentRooms.count { it.isMarked },
            "deepCleaned" to currentRooms.count { it.isDeepCleaned }
        )
    }

    /**
     * –û—á–∏—â–∞–µ—Ç –æ—à–∏–±–∫—É
     */
    fun clearError() {
        _error.value = null
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç—Ç–∞–∂–∞
     */
    fun getRoomsForFloor(floor: Int): List<Room> {
        return _rooms.value.filter { room ->
            room.number.firstOrNull()?.toString()?.toIntOrNull() == floor
        }.sortedBy { it.number }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —ç—Ç–∞–∂–µ–π
     */
    fun getAvailableFloors(): List<Int> {
        return _rooms.value
            .mapNotNull { room ->
                room.number.firstOrNull()?.toString()?.toIntOrNull()
            }
            .distinct()
            .sorted()
    }

    // MARK: - Google Sign-In

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sign-In –∫–ª–∏–µ–Ω—Ç–∞
     */
    fun initializeGoogleSignIn(context: Context) {
        try {
            val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)
                .requestIdToken(context.getString(R.string.default_web_client_id))
                .requestEmail()
                .build()

            googleSignInClient = GoogleSignIn.getClient(context, gso)
            Log.d(TAG, "Google Sign-In –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sign-In", e)
            _error.value = "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sign-In: ${e.message}"
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å Google Sign-In –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    fun getGoogleSignInClient(): GoogleSignInClient? = googleSignInClient

    /**
     * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Google –∞–∫–∫–∞—É–Ω—Ç
     */
    suspend fun signInWithGoogle(idToken: String): Boolean {
        return try {
            _isSyncing.value = true
            _error.value = null

            val credential = GoogleAuthProvider.getCredential(idToken, null)
            val result = auth.signInWithCredential(credential).await()
            val success = result.user != null

            if (success) {
                Log.d(TAG, "–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Google: ${result.user?.email}")
                _isAuthenticated.value = true
                _currentUserEmail.value = result.user?.email
            }

            success
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ Google Sign-In", e)
            _error.value = "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google: ${e.message}"
            false
        } finally {
            _isSyncing.value = false
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ Google Sign-In
     */
    suspend fun handleGoogleSignInResult(task: com.google.android.gms.tasks.Task<com.google.android.gms.auth.api.signin.GoogleSignInAccount>): Boolean {
        return try {
            val account = task.getResult(ApiException::class.java)
            val idToken = account.idToken

            if (idToken != null) {
                signInWithGoogle(idToken)
            } else {
                Log.e(TAG, "ID Token —Ä–∞–≤–µ–Ω null")
                _error.value = "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –æ—Ç Google"
                false
            }
        } catch (e: ApiException) {
            Log.e(TAG, "Google Sign-In –æ—à–∏–±–∫–∞", e)
            _error.value = "–û—à–∏–±–∫–∞ Google Sign-In: ${e.message}"
            false
        }
    }

    /**
     * –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
     */
    suspend fun signOut() {
        try {
            auth.signOut()
            googleSignInClient?.signOut()?.await()
            
            _isAuthenticated.value = false
            _currentUserEmail.value = null
            _rooms.value = emptyList()
            
            Log.d(TAG, "–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞")
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞", e)
            _error.value = "–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞: ${e.message}"
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Google Sign-In
     */
    fun isGoogleSignInAvailable(): Boolean {
        return googleSignInClient != null
    }
} 