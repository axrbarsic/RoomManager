package com.roommanager.android.ui

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
// –£–±—Ä–∞–Ω–æ - ActivityResultContracts –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.grid.GridCells
import androidx.compose.foundation.lazy.grid.LazyVerticalGrid
import androidx.compose.foundation.lazy.grid.items
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.material3.Switch
import androidx.compose.material3.SwitchDefaults
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.lifecycle.ViewModelProvider
import androidx.activity.viewModels
import com.google.accompanist.swiperefresh.SwipeRefresh
import com.google.accompanist.swiperefresh.rememberSwipeRefreshState
import com.google.accompanist.systemuicontroller.rememberSystemUiController
// –£–±—Ä–∞–Ω–æ - Google Sign-In imports –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã
import com.roommanager.android.model.Room
import com.roommanager.android.ui.components.RoomCell
import com.roommanager.android.ui.components.CellStyle
import com.roommanager.android.ui.components.LanguageSelectionDialog
import com.roommanager.android.ui.theme.RoomManagerTheme
import com.roommanager.android.utils.*
import com.roommanager.android.R
import android.content.Context

/**
 * –ì–ª–∞–≤–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
class MainActivity : ComponentActivity() {
    
    private lateinit var viewModel: RoomViewModel
    
    // –£–±—Ä–∞–Ω–æ - ActivityResultLauncher –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
    
    override fun attachBaseContext(newBase: Context?) {
        super.attachBaseContext(LocaleHelper.wrapContext(newBase ?: this))
    }
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ViewModel —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        val factory = RoomViewModelFactory(this)
        viewModel = ViewModelProvider(this, factory)[RoomViewModel::class.java]
        
        // üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ü–†–ò –ó–ê–ü–£–°–ö–ï
        viewModel.autoSignIn()
        
        setContent {
            RoomManagerTheme {
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–º–Ω—É—é —Ç–µ–º—É –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –±–∞—Ä–æ–≤
                val systemUiController = rememberSystemUiController()
                
                SideEffect {
                    systemUiController.setSystemBarsColor(
                        color = Color.Black,
                        darkIcons = false
                    )
                }
                
                RoomManagerApp(
                    viewModel = viewModel
                )
            }
        }
    }
    
    // –£–±—Ä–∞–Ω–æ - –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç Google Sign-In
    // private fun startGoogleSignIn() { ... }
}

/**
 * –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –í–°–¢–†–û–ï–ù–ù–ê–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º axrbarsic@gmail.com
 */
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun RoomManagerApp(viewModel: RoomViewModel = viewModel()) {
    // –°–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ ViewModel
    val rooms by viewModel.filteredRooms.collectAsState()
    val isAuthenticated by viewModel.isAuthenticated.collectAsState()
    val currentUserEmail by viewModel.currentUserEmail.collectAsState()
    val isSyncing by viewModel.isSyncing.collectAsState()
    val error by viewModel.error.collectAsState()
    val roomCounts by viewModel.roomCounts.collectAsState()
    val hideWhiteRooms by viewModel.hideWhiteRooms.collectAsState()
    val selectedColorFilter by viewModel.selectedColorFilter.collectAsState()
    val cellStyle by viewModel.cellStyle.collectAsState()
    
    // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ UI
    var showBottomSheet by remember { mutableStateOf(false) }
    var showLanguageDialog by remember { mutableStateOf(false) }
    val context = LocalContext.current
    
    // –§—É–Ω–∫—Ü–∏—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
    val changeLanguage = { languageCode: String ->
        LocaleHelper.setLanguage(context, languageCode)
        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —è–∑—ã–∫–∞
        (context as MainActivity).recreate()
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    error?.let { errorMessage ->
        LaunchedEffect(errorMessage) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–Ω—ç–∫–±–∞—Ä —Å –æ—à–∏–±–∫–æ–π
            // TODO: –î–æ–±–∞–≤–∏—Ç—å SnackbarHost
        }
    }

    Scaffold(
        topBar = {
            TopAppBar(
                title = {
                    // iOS-—Å—Ç–∏–ª—å –≤–µ—Ä—Ö–Ω–µ–≥–æ –º–µ–Ω—é —Å —Ü–≤–µ—Ç–Ω—ã–º–∏ —Å—á–µ—Ç—á–∏–∫–∞–º–∏ - –ê–î–ê–ü–¢–ò–í–ù–û
                    Row(
                        modifier = Modifier.fillMaxWidth(),
                        verticalAlignment = Alignment.CenterVertically,
                        horizontalArrangement = Arrangement.SpaceBetween
                    ) {
                        // –õ–µ–≤–∞—è —á–∞—Å—Ç—å: –æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫ + —Ü–≤–µ—Ç–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ - –ê–î–ê–ü–¢–ò–í–ù–û
                        Row(
                            verticalAlignment = Alignment.CenterVertically,
                            horizontalArrangement = Arrangement.spacedBy(4.dp),
                            modifier = Modifier.weight(1f) // –ó–∞–ø–æ–ª–Ω—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
                        ) {
                            // –û–±—â–∏–π —Å—á–µ—Ç—á–∏–∫ (–≤—Å–µ–≥–æ/–Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö) - –ê–î–ê–ü–¢–ò–í–ù–´–ô –†–ê–ó–ú–ï–†
                            val totalRooms = roomCounts["total"] ?: 0
                            val unfinishedRooms = (roomCounts["none"] ?: 0) + (roomCounts["red"] ?: 0)
                            Text(
                                text = "$totalRooms/$unfinishedRooms",
                                color = Color.White,
                                fontSize = ResponsiveFontSizes.normal(), // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                                fontWeight = FontWeight.Bold,
                                modifier = Modifier
                                    .background(
                                        Color.Black.copy(alpha = 0.7f),
                                        RoundedCornerShape(responsiveDp(6f))
                                    )
                                    .padding(horizontal = responsiveSpacing(), vertical = responsiveDp(2f))
                                    .widthIn(min = responsiveDp(40f)) // –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞
                            )
                            
                            // –¶–≤–µ—Ç–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ - –ê–î–ê–ü–¢–ò–í–ù–´–ï
                            ColorCounter(
                                count = roomCounts["purple"] ?: 0,
                                color = Color(0xFF9C27B0),
                                onClick = { viewModel.filterByPurple() },
                                selectedColorFilter = selectedColorFilter,
                                isCompact = true
                            )
                            ColorCounter(
                                count = roomCounts["none"] ?: 0,
                                color = Color(0xFFFFEB3B),
                                onClick = { viewModel.filterByYellow() },
                                selectedColorFilter = selectedColorFilter,
                                isCompact = true
                            )
                            ColorCounter(
                                count = roomCounts["red"] ?: 0,
                                color = Color(0xFFF44336),
                                onClick = { viewModel.filterByRed() },
                                selectedColorFilter = selectedColorFilter,
                                isCompact = true
                            )
                            // –ó–µ–ª–µ–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∑–µ–ª–µ–Ω—ã–µ –ò —Å–∏–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
                            ColorCounter(
                                count = (roomCounts["green"] ?: 0) + (roomCounts["blue"] ?: 0),
                                color = Color(0xFF4CAF50),
                                onClick = { viewModel.filterByGreen() },
                                selectedColorFilter = selectedColorFilter,
                                isCompact = true
                            )
                        }
                        
                        // –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å: –∫–Ω–æ–ø–∫–∏ –∫–∞–∫ –≤ iOS - –ê–î–ê–ü–¢–ò–í–ù–û
                        Row(
                            verticalAlignment = Alignment.CenterVertically,
                            horizontalArrangement = Arrangement.spacedBy(2.dp) // –£–º–µ–Ω—å—à–µ–Ω –æ—Ç—Å—Ç—É–ø
                        ) {
                            // –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ - –ê–î–ê–ü–¢–ò–í–ù–ê–Ø
                            IconButton(
                                onClick = { showBottomSheet = true },
                                modifier = Modifier.size(responsiveDp(28f)) // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                            ) {
                                Icon(
                                    Icons.Default.Settings,
                                    contentDescription = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                                    tint = Color.White,
                                    modifier = Modifier.size(responsiveDp(18f)) // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                                )
                            }
                            
                            // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏/–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - –ê–î–ê–ü–¢–ò–í–ù–´–ô
                            if (isSyncing) {
                                CircularProgressIndicator(
                                    modifier = Modifier.size(responsiveDp(20f)), // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                                    color = Color.Yellow,
                                    strokeWidth = responsiveDp(2.5f)
                                )
                            } else {
                                Icon(
                                    imageVector = if (isAuthenticated) Icons.Default.CheckCircle else Icons.Default.Error,
                                    contentDescription = if (isAuthenticated) "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ" else "–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ",
                                    tint = if (isAuthenticated) Color.Green else Color.Red,
                                    modifier = Modifier.size(responsiveDp(20f)) // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                                )
                            }
                        }
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = Color.Black
                )
            )
        }
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .background(Color.Black)
                .padding(paddingValues)
        ) {
            // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç - –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–º–Ω–∞—Ç
            Box(modifier = Modifier.fillMaxSize()) {
                if (rooms.isEmpty() && !isSyncing && isAuthenticated) {
                    // –ü—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –Ω–æ –Ω–µ—Ç –∫–æ–º–Ω–∞—Ç)
                    EmptyState()
                } else if (!isAuthenticated && !isSyncing) {
                    // –≠–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                    LoadingScreen()
                } else {
                    // –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å - 5 –∫–æ–ª–æ–Ω–æ–∫ —ç—Ç–∞–∂–µ–π —Å pull-to-refresh
                    val swipeRefreshState = rememberSwipeRefreshState(isSyncing)
                    
                    SwipeRefresh(
                        state = swipeRefreshState,
                        onRefresh = { viewModel.refresh() }
                    ) {
                        LazyColumn(
                            modifier = Modifier
                                .fillMaxSize()
                                .padding(vertical = responsiveSmallSpacing()), // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã
                            verticalArrangement = Arrangement.Top // –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏
                        ) {
                            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–æ–º–Ω–∞—Ç—ã –ø–æ —Å—Ç—Ä–æ–∫–∞–º, –Ω–∞ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ 5 —ç—Ç–∞–∂–µ–π
                            val roomsByFloor = (1..5).associateWith { floor ->
                                rooms.filter { room ->
                                    room.number.firstOrNull()?.toString()?.toIntOrNull() == floor
                                }.sortedBy { it.number }
                            }
                            
                            // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –Ω–∞ —ç—Ç–∞–∂–µ
                            val maxRoomsPerFloor = roomsByFloor.values.maxOfOrNull { it.size } ?: 0
                            
                            // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —ç—Ç–∞–∂–µ–π - –ë–ï–ó –û–¢–°–¢–£–ü–û–í
                            item {
                                Row(
                                    modifier = Modifier.fillMaxWidth(),
                                    horizontalArrangement = Arrangement.SpaceEvenly // –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–µ–∑ –æ—Ç—Å—Ç—É–ø–æ–≤
                                ) {
                                    for (floor in 1..5) {
                                        Card(
                                            modifier = Modifier.weight(1f), // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
                                            colors = CardDefaults.cardColors(
                                                containerColor = Color(0xFF1E1E1E)
                                            ),
                                            shape = RoundedCornerShape(responsiveDp(6f)) // –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Å–∫—Ä—É–≥–ª–µ–Ω–∏–µ
                                        ) {
                                            Text(
                                                text = floor.toString(),
                                                color = Color.White,
                                                fontSize = ResponsiveFontSizes.medium(), // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                                                fontWeight = FontWeight.Bold,
                                                textAlign = TextAlign.Center,
                                                modifier = Modifier
                                                    .fillMaxWidth()
                                                    .padding(responsiveDp(6f)) // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã
                                            )
                                        }
                                    }
                                }
                            }
                            
                            // –°—Ç—Ä–æ–∫–∏ —Å –∫–æ–º–Ω–∞—Ç–∞–º–∏
                            items(maxRoomsPerFloor) { rowIndex ->
                                Row(
                                    modifier = Modifier.fillMaxWidth(),
                                    horizontalArrangement = Arrangement.SpaceEvenly // –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –º–µ–∂–¥—É —è—á–µ–π–∫–∞–º–∏
                                ) {
                                    for (floor in 1..5) {
                                        val floorRooms = roomsByFloor[floor] ?: emptyList()
                                        val room = floorRooms.getOrNull(rowIndex)
                                        
                                        Box(modifier = Modifier.weight(1f)) {
                                            if (room != null) {
                                                RoomCell(
                                                    room = room,
                                                    cellStyle = cellStyle, // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å –∏–∑ ViewModel
                                                    onClick = { /* TODO: –î–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä */ }
                                                )
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    // Bottom Sheet —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    if (showBottomSheet) {
        SettingsBottomSheet(
            currentUserEmail = currentUserEmail,
            hideWhiteRooms = hideWhiteRooms,
            cellStyle = cellStyle,
            onToggleWhiteRooms = { viewModel.toggleWhiteRoomsVisibility() },
            onToggleCellStyle = { viewModel.toggleCellStyle() },
            onSignOut = { /* –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è - –Ω–µ—Ç –≤—ã—Ö–æ–¥–∞ */ },
            onLanguageClick = { showLanguageDialog = true },
            onDismiss = { showBottomSheet = false }
        )
    }
    
    // –î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    if (showLanguageDialog) {
        LanguageSelectionDialog(
            onLanguageSelected = changeLanguage,
            onDismiss = { showLanguageDialog = false }
        )
    }
}

// –£–±—Ä–∞–Ω–æ - ConnectionScreen –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π

/**
 * –≠–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
@Composable
fun LoadingScreen() {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(32.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        CircularProgressIndicator(
            modifier = Modifier.size(60.dp),
            strokeWidth = 4.dp,
            color = Color.White
        )
        
        Spacer(modifier = Modifier.height(24.dp))
        
        Text(
            text = stringResource(R.string.connecting_to_server),
            color = Color.White,
            fontSize = 18.sp,
            fontWeight = FontWeight.Medium
        )
        
        Spacer(modifier = Modifier.height(8.dp))
        
        Text(
            text = stringResource(R.string.syncing_with_account),
            color = Color.Gray,
            fontSize = 14.sp,
            textAlign = TextAlign.Center
        )
    }
}

/**
 * –ü—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
 */
@Composable
fun EmptyState() {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(32.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        Icon(
            Icons.Default.Hotel,
            contentDescription = null,
            modifier = Modifier.size(80.dp),
            tint = Color.Gray
        )
        
        Spacer(modifier = Modifier.height(16.dp))
        
        Text(
            text = stringResource(R.string.no_rooms_data),
            color = Color.White,
            fontSize = 20.sp,
            fontWeight = FontWeight.Bold
        )
        
        Spacer(modifier = Modifier.height(8.dp))
        
        Text(
            text = stringResource(R.string.add_rooms_instruction),
            color = Color.Gray,
            textAlign = TextAlign.Center
        )
    }
}

/**
 * Bottom Sheet —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
 * –í–°–¢–†–û–ï–ù–ù–ê–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
 */
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun SettingsBottomSheet(
    currentUserEmail: String?, // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    hideWhiteRooms: Boolean,
    cellStyle: CellStyle,
    onToggleWhiteRooms: () -> Unit,
    onToggleCellStyle: () -> Unit,
    onSignOut: () -> Unit, // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏  
    onLanguageClick: () -> Unit, // –ù–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —è–∑—ã–∫–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
    onDismiss: () -> Unit
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = Color(0xFF1E1E1E)
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp)
        ) {
            Text(
                text = stringResource(R.string.information),
                color = Color.White,
                fontSize = 20.sp,
                fontWeight = FontWeight.Bold,
                modifier = Modifier.padding(bottom = 16.dp)
            )
            
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(bottom = 16.dp),
                colors = CardDefaults.cardColors(
                    containerColor = Color(0xFF2E2E2E)
                )
            ) {
                Column(
                    modifier = Modifier.padding(16.dp)
                ) {
                    Row(
                        verticalAlignment = Alignment.CenterVertically,
                        modifier = Modifier.padding(bottom = 8.dp)
                    ) {
                        Icon(
                            Icons.Default.AccountCircle,
                            contentDescription = null,
                            tint = Color(0xFF4CAF50),
                            modifier = Modifier.size(24.dp)
                        )
                        Spacer(modifier = Modifier.width(8.dp))
                        Text(
                            text = stringResource(R.string.account),
                            color = Color.White,
                            fontSize = 16.sp,
                            fontWeight = FontWeight.Medium
                        )
                    }
                    
                    Text(
                        text = stringResource(R.string.user_email),
                        color = Color(0xFF4CAF50),
                        fontSize = 14.sp,
                        fontWeight = FontWeight.Medium
                    )
                    Text(
                        text = stringResource(R.string.built_in_auth),
                        color = Color.Gray,
                        fontSize = 12.sp
                    )
                }
            }
            
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(bottom = 16.dp),
                colors = CardDefaults.cardColors(
                    containerColor = Color(0xFF2E2E2E)
                )
            ) {
                Column(
                    modifier = Modifier.padding(16.dp)
                ) {
                    Row(
                        verticalAlignment = Alignment.CenterVertically,
                        modifier = Modifier.padding(bottom = 8.dp)
                    ) {
                        Icon(
                            Icons.Default.Sync,
                            contentDescription = null,
                            tint = Color(0xFF2196F3),
                            modifier = Modifier.size(24.dp)
                        )
                        Spacer(modifier = Modifier.width(8.dp))
                        Text(
                            text = stringResource(R.string.synchronization),
                            color = Color.White,
                            fontSize = 16.sp,
                            fontWeight = FontWeight.Medium
                        )
                    }
                    
                    Text(
                        text = stringResource(R.string.auto_sync_ios),
                        color = Color(0xFF2196F3),
                        fontSize = 14.sp
                    )
                    Text(
                        text = stringResource(R.string.realtime_updates),
                        color = Color.Gray,
                        fontSize = 12.sp
                    )
                }
            }
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(bottom = 16.dp),
                colors = CardDefaults.cardColors(
                    containerColor = Color(0xFF2E2E2E)
                )
            ) {
                Column(
                    modifier = Modifier.padding(16.dp)
                ) {
                    Row(
                        verticalAlignment = Alignment.CenterVertically,
                        modifier = Modifier.padding(bottom = 12.dp)
                    ) {
                        Icon(
                            Icons.Default.FilterList,
                            contentDescription = null,
                            tint = Color(0xFFFF9800),
                            modifier = Modifier.size(24.dp)
                        )
                        Spacer(modifier = Modifier.width(8.dp))
                        Text(
                            text = stringResource(R.string.display_settings),
                            color = Color.White,
                            fontSize = 16.sp,
                            fontWeight = FontWeight.Medium
                        )
                    }
                    
                    // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –±–µ–ª—ã—Ö –∫–æ–º–Ω–∞—Ç
                    Row(
                        modifier = Modifier.fillMaxWidth(),
                        horizontalArrangement = Arrangement.SpaceBetween,
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Column(modifier = Modifier.weight(1f)) {
                            Text(
                                text = stringResource(R.string.hide_white_rooms),
                                color = Color.White,
                                fontSize = 14.sp,
                                fontWeight = FontWeight.Medium
                            )
                            Text(
                                text = if (hideWhiteRooms) stringResource(R.string.hidden) else stringResource(R.string.shown),
                                color = Color.Gray,
                                fontSize = 12.sp
                            )
                        }
                        
                        Switch(
                            checked = hideWhiteRooms,
                            onCheckedChange = { onToggleWhiteRooms() },
                            colors = SwitchDefaults.colors(
                                checkedThumbColor = Color.White,
                                checkedTrackColor = Color(0xFF4CAF50),
                                uncheckedThumbColor = Color.Gray,
                                uncheckedTrackColor = Color(0xFF424242)
                            )
                        )
                    }
                    
                    Spacer(modifier = Modifier.height(12.dp))
                    
                    // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Å—Ç–∏–ª—è —è—á–µ–µ–∫
                    Row(
                        modifier = Modifier.fillMaxWidth(),
                        horizontalArrangement = Arrangement.SpaceBetween,
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Column(modifier = Modifier.weight(1f)) {
                            Text(
                                text = stringResource(R.string.cell_style),
                                color = Color.White,
                                fontSize = 14.sp,
                                fontWeight = FontWeight.Medium
                            )
                            Text(
                                text = when (cellStyle) {
                                    CellStyle.FLAT -> stringResource(R.string.style_flat)
                                    CellStyle.CLASSIC -> stringResource(R.string.style_classic)
                                },
                                color = Color.Gray,
                                fontSize = 12.sp
                            )
                        }
                        
                        Switch(
                            checked = cellStyle == CellStyle.CLASSIC,
                            onCheckedChange = { onToggleCellStyle() },
                            colors = SwitchDefaults.colors(
                                checkedThumbColor = Color.White,
                                checkedTrackColor = Color(0xFF9C27B0),
                                uncheckedThumbColor = Color.Gray,
                                uncheckedTrackColor = Color(0xFF424242)
                            )
                        )
                    }
                }
            }
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(bottom = 16.dp)
                    .clickable { onLanguageClick() },
                colors = CardDefaults.cardColors(
                    containerColor = Color(0xFF2E2E2E)
                )
            ) {
                Column(
                    modifier = Modifier.padding(16.dp)
                ) {
                    Row(
                        verticalAlignment = Alignment.CenterVertically,
                        modifier = Modifier.padding(bottom = 8.dp)
                    ) {
                        Icon(
                            Icons.Default.Language,
                            contentDescription = null,
                            tint = Color(0xFFE91E63),
                            modifier = Modifier.size(24.dp)
                        )
                        Spacer(modifier = Modifier.width(8.dp))
                        Text(
                            text = stringResource(R.string.language),
                            color = Color.White,
                            fontSize = 16.sp,
                            fontWeight = FontWeight.Medium
                        )
                    }
                    
                    Text(
                        text = LocaleHelper.getLanguageDisplayName(LocaleHelper.getSavedLanguage(LocalContext.current)),
                        color = Color(0xFFE91E63),
                        fontSize = 14.sp
                    )
                    Text(
                        text = stringResource(R.string.language_description),
                        color = Color.Gray,
                        fontSize = 12.sp
                    )
                }
            }
            
            Spacer(modifier = Modifier.height(16.dp))
        }
    }
}

/**
 * –¶–≤–µ—Ç–Ω–æ–π —Å—á–µ—Ç—á–∏–∫ –≤ —Å—Ç–∏–ª–µ iOS - –ê–î–ê–ü–¢–ò–í–ù–´–ô
 */
@Composable
fun ColorCounter(
    count: Int,
    color: Color,
    onClick: () -> Unit,
    selectedColorFilter: String?,
    isCompact: Boolean = false
) {
    val textColor = when {
        color == Color(0xFFFFEB3B) || color == Color(0xFF4CAF50) -> Color.Black
        else -> Color.White
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —ç—Ç–æ—Ç —Ñ–∏–ª—å—Ç—Ä
    val isActive = when {
        color == Color(0xFF9C27B0) && selectedColorFilter == "PURPLE" -> true
        color == Color(0xFFFFEB3B) && selectedColorFilter == "NONE" -> true
        color == Color(0xFFF44336) && selectedColorFilter == "RED" -> true
        color == Color(0xFF4CAF50) && selectedColorFilter == "GREEN_BLUE" -> true
        else -> false
    }
    
    Text(
        text = count.toString(),
        color = textColor,
        fontSize = if (isCompact) 14.sp else 16.sp,
        fontWeight = FontWeight.Bold,
        modifier = Modifier
            .background(color, RoundedCornerShape(if (isCompact) 4.dp else 6.dp))
            .then(
                if (isActive) {
                    Modifier.border(2.dp, Color.White, RoundedCornerShape(if (isCompact) 4.dp else 6.dp))
                } else {
                    Modifier
                }
            )
            .clickable { onClick() }
            .padding(
                horizontal = if (isCompact) 8.dp else 12.dp, 
                vertical = if (isCompact) 2.dp else 4.dp
            )
            .widthIn(min = if (isCompact) 24.dp else 40.dp)
    )
} 