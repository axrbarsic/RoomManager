package com.roommanager.android.ui

import android.app.Activity
import android.content.Context
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.google.android.gms.auth.api.signin.GoogleSignIn
import com.roommanager.android.firebase.FirebaseManager
import com.roommanager.android.model.Room
import com.roommanager.android.model.RoomColor
import com.roommanager.android.utils.PreferencesManager
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.combine
import kotlinx.coroutines.launch
import kotlinx.coroutines.flow.stateIn
import kotlinx.coroutines.flow.SharingStarted
import com.roommanager.android.ui.components.CellStyle

/**
 * ViewModel –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∫–æ–º–Ω–∞—Ç –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
 */
class RoomViewModel(private val context: Context? = null) : ViewModel() {
    
    private val firebaseManager = FirebaseManager.instance
    private val preferencesManager: PreferencesManager? = context?.let { PreferencesManager.getInstance(it) }
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ UI —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    private val _selectedFloor = MutableStateFlow<Int?>(null)
    val selectedFloor: StateFlow<Int?> = _selectedFloor.asStateFlow()
    
    private val _hideWhiteRooms = MutableStateFlow(preferencesManager?.getHideWhiteRooms() ?: false)
    val hideWhiteRooms: StateFlow<Boolean> = _hideWhiteRooms.asStateFlow()
    
    private val _showMarkedOnly = MutableStateFlow(preferencesManager?.getShowMarkedOnly() ?: false)
    val showMarkedOnly: StateFlow<Boolean> = _showMarkedOnly.asStateFlow()
    
    private val _selectedColorFilter = MutableStateFlow(preferencesManager?.getSelectedColorFilter())
    val selectedColorFilter: StateFlow<String?> = _selectedColorFilter.asStateFlow()
    
    private val _cellStyle = MutableStateFlow(preferencesManager?.getCellStyle() ?: CellStyle.FLAT)
    val cellStyle: StateFlow<CellStyle> = _cellStyle.asStateFlow()
    
    // –ü—Ä–æ–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏–∑ FirebaseManager
    val rooms = firebaseManager.rooms
    val isAuthenticated = firebaseManager.isAuthenticated
    val currentUserEmail = firebaseManager.currentUserEmail
    val isSyncing = firebaseManager.isSyncing
    val lastSyncTime = firebaseManager.lastSyncTime
    val error = firebaseManager.error
    
    // –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫
    val filteredRooms: StateFlow<List<Room>> = combine(
        rooms,
        selectedFloor,
        hideWhiteRooms,
        showMarkedOnly,
        selectedColorFilter
    ) { roomsList, floor, hideWhite, markedOnly, colorFilter ->
        var filtered = roomsList
        
        // –§–∏–ª—å—Ç—Ä –ø–æ —ç—Ç–∞–∂—É
        floor?.let { floorNumber ->
            filtered = filtered.filter { room ->
                room.number.firstOrNull()?.toString()?.toIntOrNull() == floorNumber
            }
        }
        
        // –°–∫—Ä—ã—Ç–∏–µ –±–µ–ª—ã—Ö –∫–æ–º–Ω–∞—Ç
        if (hideWhite) {
            filtered = filtered.filter { it.color != RoomColor.WHITE }
        }
        
        // –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–º–µ—á–µ–Ω–Ω—ã–µ
        if (markedOnly) {
            filtered = filtered.filter { it.isMarked }
        }
        
        // –§–∏–ª—å—Ç—Ä –ø–æ —Ü–≤–µ—Ç—É
        colorFilter?.let { color ->
            filtered = when (color) {
                "GREEN_BLUE" -> filtered.filter { it.color == RoomColor.GREEN || it.color == RoomColor.BLUE }
                else -> filtered.filter { it.color.toString() == color }
            }
        }
        
        filtered.sortedBy { it.number }
    }.stateIn(
        scope = viewModelScope,
        started = SharingStarted.WhileSubscribed(5000),
        initialValue = emptyList()
    )
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–Ω–∞—Ç
    val roomCounts: StateFlow<Map<String, Int>> = combine(
        rooms,
        filteredRooms
    ) { _, filtered -> // allRooms –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        val totalCounts = firebaseManager.getRoomCounts()
        val filteredCounts = mapOf(
            "filtered_total" to filtered.size,
            "filtered_none" to filtered.count { it.color == RoomColor.NONE },
            "filtered_red" to filtered.count { it.color == RoomColor.RED },
            "filtered_green" to filtered.count { it.color == RoomColor.GREEN },
            "filtered_purple" to filtered.count { it.color == RoomColor.PURPLE },
            "filtered_blue" to filtered.count { it.color == RoomColor.BLUE },
            "filtered_white" to filtered.count { it.color == RoomColor.WHITE },
            "filtered_marked" to filtered.count { it.isMarked },
            "filtered_deepCleaned" to filtered.count { it.isDeepCleaned }
        )
        totalCounts + filteredCounts
    }.stateIn(
        scope = viewModelScope,
        started = SharingStarted.WhileSubscribed(5000),
        initialValue = emptyMap()
    )
    
    // –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç—Ç–∞–∂–∏
    val availableFloors: StateFlow<List<Int>> = rooms.run {
        combine(this) { roomsList ->
            roomsList[0].mapNotNull { room ->
                room.number.firstOrNull()?.toString()?.toIntOrNull()
            }.distinct().sorted()
        }.stateIn(
            scope = viewModelScope,
            started = SharingStarted.WhileSubscribed(5000),
            initialValue = emptyList()
        )
    }

    /**
     * üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ axrbarsic@gmail.com
     */
    fun autoSignIn() {
        viewModelScope.launch {
            firebaseManager.autoSignIn()
        }
    }

    /**
     * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Firebase
     */
    fun connectToFirebase() {
        viewModelScope.launch {
            firebaseManager.signInAnonymously()
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–¥–ª—è pull-to-refresh)
     */
    fun refresh() {
        // –ü—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É - Firebase –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–∏—Ç –¥–∞–Ω–Ω—ã–µ
        firebaseManager.clearError()
        
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if (!firebaseManager.isAuthenticated.value) {
            connectToFirebase()
        }
    }

    /**
     * –í—ã–±—Ä–∞—Ç—å —ç—Ç–∞–∂ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    fun selectFloor(floor: Int?) {
        _selectedFloor.value = floor
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å –±–µ–ª—ã—Ö –∫–æ–º–Ω–∞—Ç
     */
    fun toggleWhiteRoomsVisibility() {
        val newValue = !_hideWhiteRooms.value
        _hideWhiteRooms.value = newValue
        preferencesManager?.setHideWhiteRooms(newValue)
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø–æ–∫–∞–∑ —Ç–æ–ª—å–∫–æ –ø–æ–º–µ—á–µ–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç
     */
    fun toggleShowMarkedOnly() {
        val newValue = !_showMarkedOnly.value
        _showMarkedOnly.value = newValue
        preferencesManager?.setShowMarkedOnly(newValue)
    }
    
    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∏–ª—å —è—á–µ–µ–∫ –º–µ–∂–¥—É –ø–ª–æ—Å–∫–∏–º –∏ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–º
     */
    fun toggleCellStyle() {
        val newStyle = when (_cellStyle.value) {
            CellStyle.FLAT -> CellStyle.CLASSIC
            CellStyle.CLASSIC -> CellStyle.FLAT
        }
        _cellStyle.value = newStyle
        preferencesManager?.setCellStyle(newStyle)
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ü–≤–µ—Ç—É (–∫–∞–∫ –≤ iOS)
     */
    fun setColorFilter(color: String?) {
        val newFilter = if (_selectedColorFilter.value == color) null else color
        _selectedColorFilter.value = newFilter
        preferencesManager?.setSelectedColorFilter(newFilter)
    }
    
    /**
     * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ñ–∏–æ–ª–µ—Ç–æ–≤–æ–º—É —Ü–≤–µ—Ç—É
     */
    fun filterByPurple() {
        setColorFilter("PURPLE")
    }
    
    /**
     * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∂–µ–ª—Ç–æ–º—É —Ü–≤–µ—Ç—É (none)
     */
    fun filterByYellow() {
        setColorFilter("NONE")
    }
    
    /**
     * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫—Ä–∞—Å–Ω–æ–º—É —Ü–≤–µ—Ç—É
     */
    fun filterByRed() {
        setColorFilter("RED")
    }
    
    /**
     * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∑–µ–ª–µ–Ω–æ–º—É+—Å–∏–Ω–µ–º—É —Ü–≤–µ—Ç—É (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä)
     */
    fun filterByGreen() {
        // –î–ª—è –∑–µ–ª–µ–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ –Ω—É–∂–Ω–∞ –æ—Å–æ–±–∞—è –ª–æ–≥–∏–∫–∞ –≤ filteredRooms
        _selectedColorFilter.value = if (_selectedColorFilter.value == "GREEN_BLUE") null else "GREEN_BLUE"
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å –æ—à–∏–±–∫—É
     */
    fun clearError() {
        firebaseManager.clearError()
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–Ω–∞—Ç—ã
     */
    fun getColorForRoomStatus(status: RoomColor): androidx.compose.ui.graphics.Color {
        return when (status) {
            RoomColor.NONE -> androidx.compose.ui.graphics.Color(0xFFFFEB3B) // –ñ–µ–ª—Ç—ã–π
            RoomColor.RED -> androidx.compose.ui.graphics.Color(0xFFF44336) // –ö—Ä–∞—Å–Ω—ã–π
            RoomColor.GREEN -> androidx.compose.ui.graphics.Color(0xFF4CAF50) // –ó–µ–ª–µ–Ω—ã–π
            RoomColor.PURPLE -> androidx.compose.ui.graphics.Color(0xFF9C27B0) // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
            RoomColor.BLUE -> androidx.compose.ui.graphics.Color(0xFF2196F3) // –°–∏–Ω–∏–π
            RoomColor.WHITE -> androidx.compose.ui.graphics.Color(0xFFFFFFFF) // –ë–µ–ª—ã–π
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–Ω–∞—Ç—ã
     */
    fun getTextColorForRoomStatus(status: RoomColor): androidx.compose.ui.graphics.Color {
        return when (status) {
            RoomColor.NONE, RoomColor.GREEN, RoomColor.WHITE -> 
                androidx.compose.ui.graphics.Color.Black
            RoomColor.RED, RoomColor.PURPLE, RoomColor.BLUE -> 
                androidx.compose.ui.graphics.Color.White
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–Ω–∞—Ç—ã
     */
    fun getStatusDescription(status: RoomColor): String {
        return when (status) {
            RoomColor.NONE -> "–ù–µ —É–±—Ä–∞–Ω–∞"
            RoomColor.RED -> "–ì—Ä—è–∑–Ω–∞—è / Check out"
            RoomColor.GREEN -> "–£–±—Ä–∞–Ω–∞"
            RoomColor.PURPLE -> "–î–æ—Å—Ç—É–ø–Ω–∞ —Å –≤—Ä–µ–º–µ–Ω–∏"
            RoomColor.BLUE -> "Out of order"
            RoomColor.WHITE -> "–°–∫—Ä—ã—Ç–∞"
        }
    }

    // MARK: - Google Sign-In

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sign-In
     */
    fun initializeGoogleSignIn(context: Context) {
        firebaseManager.initializeGoogleSignIn(context)
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å Intent –¥–ª—è Google Sign-In
     */
    fun getGoogleSignInIntent() = firebaseManager.getGoogleSignInClient()?.signInIntent

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ Google Sign-In
     */
    fun handleGoogleSignInResult(task: com.google.android.gms.tasks.Task<com.google.android.gms.auth.api.signin.GoogleSignInAccount>) {
        viewModelScope.launch {
            firebaseManager.handleGoogleSignInResult(task)
        }
    }

    /**
     * –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
     */
    fun signOut() {
        viewModelScope.launch {
            firebaseManager.signOut()
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Google Sign-In
     */
    fun isGoogleSignInAvailable(): Boolean {
        return firebaseManager.isGoogleSignInAvailable()
    }
} 